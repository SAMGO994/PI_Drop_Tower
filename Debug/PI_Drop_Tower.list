
PI_Drop_Tower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000520c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e0  080053e0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080053e0  080053e0  000153e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053e8  080053e8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053ec  080053ec  000153ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080053f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000001c  0800540c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  0800540c  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a11  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b1  00000000  00000000  00032a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00035010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00036008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c27  00000000  00000000  00036f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123a3  00000000  00000000  00057b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8c52  00000000  00000000  00069ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132b34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d4  00000000  00000000  00132b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000001c 	.word	0x2000001c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005380 	.word	0x08005380

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000020 	.word	0x20000020
 80001c8:	08005380 	.word	0x08005380

080001cc <strcmp>:
 80001cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d4:	2a01      	cmp	r2, #1
 80001d6:	bf28      	it	cs
 80001d8:	429a      	cmpcs	r2, r3
 80001da:	d0f7      	beq.n	80001cc <strcmp>
 80001dc:	1ad0      	subs	r0, r2, r3
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <fsm_state_change>:

extern eSystemState fsm_state_change(eSystemState state,
		bool* req_clamp_open,
		bool* req_EM_open,
		uint8_t flag_action_result)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60b9      	str	r1, [r7, #8]
 80004ec:	607a      	str	r2, [r7, #4]
 80004ee:	461a      	mov	r2, r3
 80004f0:	4603      	mov	r3, r0
 80004f2:	73fb      	strb	r3, [r7, #15]
 80004f4:	4613      	mov	r3, r2
 80004f6:	73bb      	strb	r3, [r7, #14]
	switch (state){
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
 80004fa:	2b04      	cmp	r3, #4
 80004fc:	d839      	bhi.n	8000572 <fsm_state_change+0x8e>
 80004fe:	a201      	add	r2, pc, #4	; (adr r2, 8000504 <fsm_state_change+0x20>)
 8000500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000504:	08000519 	.word	0x08000519
 8000508:	08000541 	.word	0x08000541
 800050c:	08000573 	.word	0x08000573
 8000510:	08000559 	.word	0x08000559
 8000514:	0800054d 	.word	0x0800054d
		case Idle_State:


			if(*req_clamp_open){
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d005      	beq.n	800052c <fsm_state_change+0x48>
				*req_clamp_open = false;
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
				state = Clamp_Opening_State;
 8000526:	2301      	movs	r3, #1
 8000528:	73fb      	strb	r3, [r7, #15]
			}
			else if(*req_EM_open){
				*req_EM_open = false;
				state = EM_Open_State;
			}
			break;
 800052a:	e01b      	b.n	8000564 <fsm_state_change+0x80>
			else if(*req_EM_open){
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d017      	beq.n	8000564 <fsm_state_change+0x80>
				*req_EM_open = false;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
				state = EM_Open_State;
 800053a:	2303      	movs	r3, #3
 800053c:	73fb      	strb	r3, [r7, #15]
			break;
 800053e:	e011      	b.n	8000564 <fsm_state_change+0x80>
		case Clamp_Opening_State:
			if(flag_action_result == ACTION_OK){
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d110      	bne.n	8000568 <fsm_state_change+0x84>
				state = Clamp_Closing_State;
 8000546:	2304      	movs	r3, #4
 8000548:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800054a:	e00d      	b.n	8000568 <fsm_state_change+0x84>

		case Clamp_Closing_State:
			if(flag_action_result == ACTION_OK){
 800054c:	7bbb      	ldrb	r3, [r7, #14]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d10c      	bne.n	800056c <fsm_state_change+0x88>
				state = Idle_State;
 8000552:	2300      	movs	r3, #0
 8000554:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8000556:	e009      	b.n	800056c <fsm_state_change+0x88>
		case EM_Open_State:
			if(flag_action_result == ACTION_OK){
 8000558:	7bbb      	ldrb	r3, [r7, #14]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d108      	bne.n	8000570 <fsm_state_change+0x8c>
				state = Idle_State;
 800055e:	2300      	movs	r3, #0
 8000560:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8000562:	e005      	b.n	8000570 <fsm_state_change+0x8c>
			break;
 8000564:	bf00      	nop
 8000566:	e004      	b.n	8000572 <fsm_state_change+0x8e>
			break;
 8000568:	bf00      	nop
 800056a:	e002      	b.n	8000572 <fsm_state_change+0x8e>
			break;
 800056c:	bf00      	nop
 800056e:	e000      	b.n	8000572 <fsm_state_change+0x8e>
			break;
 8000570:	bf00      	nop
		case Error_State:
			//indicate problem using LED
			break;
	}
	return state;
 8000572:	7bfb      	ldrb	r3, [r7, #15]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <fsm_state_action>:


extern uint8_t fsm_state_action(eSystemState state, signal_struct signal, TIM_HandleTypeDef* htim2, TIM_HandleTypeDef* htim1)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60b9      	str	r1, [r7, #8]
 8000588:	607a      	str	r2, [r7, #4]
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	4603      	mov	r3, r0
 800058e:	73fb      	strb	r3, [r7, #15]
	uint8_t action_result;
	action_result = ACTION_NOK;
 8000590:	2302      	movs	r3, #2
 8000592:	75fb      	strb	r3, [r7, #23]
	static uint16_t counter=0;
	switch (state){
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	2b04      	cmp	r3, #4
 8000598:	d862      	bhi.n	8000660 <fsm_state_action+0xe0>
 800059a:	a201      	add	r2, pc, #4	; (adr r2, 80005a0 <fsm_state_action+0x20>)
 800059c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a0:	08000661 	.word	0x08000661
 80005a4:	080005b5 	.word	0x080005b5
 80005a8:	08000661 	.word	0x08000661
 80005ac:	08000651 	.word	0x08000651
 80005b0:	08000603 	.word	0x08000603

			break;
		case Clamp_Opening_State:

			//set PWM motor for open clamp
			  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2104      	movs	r1, #4
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 fba9 	bl	8002d10 <HAL_TIM_PWM_Start>

			if(counter >=3000){
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <fsm_state_action+0xec>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d909      	bls.n	80005de <fsm_state_action+0x5e>
				counter = 0;
 80005ca:	4b28      	ldr	r3, [pc, #160]	; (800066c <fsm_state_action+0xec>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	801a      	strh	r2, [r3, #0]
				//stop PWM
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2104      	movs	r1, #4
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fc79 	bl	8002ecc <HAL_TIM_PWM_Stop>
				//action_result = ACTION_ERROR;  //correct line
				action_result = ACTION_OK; //fake line for debug purpose
 80005da:	2301      	movs	r3, #1
 80005dc:	75fb      	strb	r3, [r7, #23]
			}


			if(signal.clamp_switch_close_1 && signal.clamp_switch_close_2){
 80005de:	7abb      	ldrb	r3, [r7, #10]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d007      	beq.n	80005f4 <fsm_state_action+0x74>
 80005e4:	7afb      	ldrb	r3, [r7, #11]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d004      	beq.n	80005f4 <fsm_state_action+0x74>
				//stop PWM
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2104      	movs	r1, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fc6c 	bl	8002ecc <HAL_TIM_PWM_Stop>
				//action_result = ACTION_OK; //fake
			}


			counter ++;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	; (800066c <fsm_state_action+0xec>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <fsm_state_action+0xec>)
 80005fe:	801a      	strh	r2, [r3, #0]
			break;
 8000600:	e02e      	b.n	8000660 <fsm_state_action+0xe0>

		case Clamp_Closing_State:

			//set PWM motor for open clamp
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000602:	463b      	mov	r3, r7
 8000604:	2104      	movs	r1, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fb82 	bl	8002d10 <HAL_TIM_PWM_Start>

			if(counter >=3000){
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <fsm_state_action+0xec>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000614:	4293      	cmp	r3, r2
 8000616:	d909      	bls.n	800062c <fsm_state_action+0xac>
				counter = 0;
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <fsm_state_action+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	801a      	strh	r2, [r3, #0]
				//stop PWM
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800061e:	463b      	mov	r3, r7
 8000620:	2104      	movs	r1, #4
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fc52 	bl	8002ecc <HAL_TIM_PWM_Stop>
				//action_result = ACTION_ERROR;  //correct line
				action_result = ACTION_OK; //fake line for debug purpose
 8000628:	2301      	movs	r3, #1
 800062a:	75fb      	strb	r3, [r7, #23]
				//stop PWM
			}

				//set PWM motor for open clamp
			if(signal.clamp_switch_open_1 && signal.clamp_switch_open_2){
 800062c:	7a3b      	ldrb	r3, [r7, #8]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d007      	beq.n	8000642 <fsm_state_action+0xc2>
 8000632:	7a7b      	ldrb	r3, [r7, #9]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d004      	beq.n	8000642 <fsm_state_action+0xc2>
				//action_result = ACTION_OK; //fake
				//stop PWM
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000638:	463b      	mov	r3, r7
 800063a:	2104      	movs	r1, #4
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fc45 	bl	8002ecc <HAL_TIM_PWM_Stop>
			}

			counter ++;
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <fsm_state_action+0xec>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	b29a      	uxth	r2, r3
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <fsm_state_action+0xec>)
 800064c:	801a      	strh	r2, [r3, #0]

			break;
 800064e:	e007      	b.n	8000660 <fsm_state_action+0xe0>
		case EM_Open_State:

			//setp pin to open EM

			if(counter >= 1000){
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <fsm_state_action+0xec>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000658:	d301      	bcc.n	800065e <fsm_state_action+0xde>
				//setp pin to open EM
				action_result = ACTION_OK;
 800065a:	2301      	movs	r3, #1
 800065c:	75fb      	strb	r3, [r7, #23]
			}


			break;
 800065e:	bf00      	nop
		case Error_State:
			break;
	}
	return action_result;
 8000660:	7dfb      	ldrb	r3, [r7, #23]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000038 	.word	0x20000038

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 fcf9 	bl	800106a <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f824 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 f9e6 	bl	8000a4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000680:	f000 f9b4 	bl	80009ec <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000684:	f000 f94a 	bl	800091c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000688:	f000 f97e 	bl	8000988 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800068c:	f000 f87c 	bl	8000788 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000690:	f000 f8ce 	bl	8000830 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //start timer in interrupt mode
  HAL_TIM_Base_Start_IT(&htim6);
 8000694:	4807      	ldr	r0, [pc, #28]	; (80006b4 <main+0x44>)
 8000696:	f002 fa85 	bl	8002ba4 <HAL_TIM_Base_Start_IT>

  //set PWM for motor
  //CCR value is from 0 to 1000 for 0% - 100% duty
  TIM1->CCR2 = 250;
 800069a:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <main+0x48>)
 800069c:	22fa      	movs	r2, #250	; 0xfa
 800069e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR2 = 250;
 80006a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006a4:	22fa      	movs	r2, #250	; 0xfa
 80006a6:	639a      	str	r2, [r3, #56]	; 0x38

  //enable uart IRQ
  //HAL_NVIC_EnableIRQ(USART1_IRQn);
  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, SIZE_DATA);
 80006a8:	2206      	movs	r2, #6
 80006aa:	4904      	ldr	r1, [pc, #16]	; (80006bc <main+0x4c>)
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <main+0x50>)
 80006ae:	f003 fc2f 	bl	8003f10 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <main+0x42>
 80006b4:	200000d4 	.word	0x200000d4
 80006b8:	40012c00 	.word	0x40012c00
 80006bc:	20000228 	.word	0x20000228
 80006c0:	20000120 	.word	0x20000120

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b096      	sub	sp, #88	; 0x58
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2244      	movs	r2, #68	; 0x44
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 fe4c 	bl	8005370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	463b      	mov	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ea:	f001 f87d 	bl	80017e8 <HAL_PWREx_ControlVoltageScaling>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006f4:	f000 fabe 	bl	8000c74 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006f8:	f001 f858 	bl	80017ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <SystemClock_Config+0xc0>)
 80006fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000702:	4a20      	ldr	r2, [pc, #128]	; (8000784 <SystemClock_Config+0xc0>)
 8000704:	f023 0318 	bic.w	r3, r3, #24
 8000708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800070c:	2314      	movs	r3, #20
 800070e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800071c:	2360      	movs	r3, #96	; 0x60
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000724:	2301      	movs	r3, #1
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800072c:	2310      	movs	r3, #16
 800072e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000730:	2307      	movs	r3, #7
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4618      	mov	r0, r3
 8000742:	f001 f8a7 	bl	8001894 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800074c:	f000 fa92 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2303      	movs	r3, #3
 8000756:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	2101      	movs	r1, #1
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fca7 	bl	80020bc <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000774:	f000 fa7e 	bl	8000c74 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000778:	f002 f8ba 	bl	80028f0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800077c:	bf00      	nop
 800077e:	3758      	adds	r7, #88	; 0x58
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000

08000788 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a6:	4b20      	ldr	r3, [pc, #128]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007a8:	4a20      	ldr	r2, [pc, #128]	; (800082c <MX_TIM1_Init+0xa4>)
 80007aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007ae:	220f      	movs	r2, #15
 80007b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d2:	4815      	ldr	r0, [pc, #84]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007d4:	f002 f98e 	bl	8002af4 <HAL_TIM_Base_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80007de:	f000 fa49 	bl	8000c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007f0:	f002 fe28 	bl	8003444 <HAL_TIM_ConfigClockSource>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80007fa:	f000 fa3b 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	4619      	mov	r1, r3
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <MX_TIM1_Init+0xa0>)
 8000810:	f003 faac 	bl	8003d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800081a:	f000 fa2b 	bl	8000c74 <Error_Handler>
  /* USER CODE BEGIN TIM1_Init 2 */


  /* USER CODE END TIM1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000003c 	.word	0x2000003c
 800082c:	40012c00 	.word	0x40012c00

08000830 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	; 0x38
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
 800085e:	615a      	str	r2, [r3, #20]
 8000860:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000862:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <MX_TIM2_Init+0xe8>)
 8000864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000868:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 800086a:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <MX_TIM2_Init+0xe8>)
 800086c:	220f      	movs	r2, #15
 800086e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b29      	ldr	r3, [pc, #164]	; (8000918 <MX_TIM2_Init+0xe8>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000876:	4b28      	ldr	r3, [pc, #160]	; (8000918 <MX_TIM2_Init+0xe8>)
 8000878:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800087c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <MX_TIM2_Init+0xe8>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000884:	4b24      	ldr	r3, [pc, #144]	; (8000918 <MX_TIM2_Init+0xe8>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800088a:	4823      	ldr	r0, [pc, #140]	; (8000918 <MX_TIM2_Init+0xe8>)
 800088c:	f002 f932 	bl	8002af4 <HAL_TIM_Base_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000896:	f000 f9ed 	bl	8000c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a4:	4619      	mov	r1, r3
 80008a6:	481c      	ldr	r0, [pc, #112]	; (8000918 <MX_TIM2_Init+0xe8>)
 80008a8:	f002 fdcc 	bl	8003444 <HAL_TIM_ConfigClockSource>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80008b2:	f000 f9df 	bl	8000c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008b6:	4818      	ldr	r0, [pc, #96]	; (8000918 <MX_TIM2_Init+0xe8>)
 80008b8:	f002 f9c8 	bl	8002c4c <HAL_TIM_PWM_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008c2:	f000 f9d7 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4810      	ldr	r0, [pc, #64]	; (8000918 <MX_TIM2_Init+0xe8>)
 80008d6:	f003 fa49 	bl	8003d6c <HAL_TIMEx_MasterConfigSynchronization>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008e0:	f000 f9c8 	bl	8000c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e4:	2360      	movs	r3, #96	; 0x60
 80008e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	2204      	movs	r2, #4
 80008f8:	4619      	mov	r1, r3
 80008fa:	4807      	ldr	r0, [pc, #28]	; (8000918 <MX_TIM2_Init+0xe8>)
 80008fc:	f002 fc8e 	bl	800321c <HAL_TIM_PWM_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000906:	f000 f9b5 	bl	8000c74 <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */



  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800090a:	4803      	ldr	r0, [pc, #12]	; (8000918 <MX_TIM2_Init+0xe8>)
 800090c:	f000 fa28 	bl	8000d60 <HAL_TIM_MspPostInit>

}
 8000910:	bf00      	nop
 8000912:	3738      	adds	r7, #56	; 0x38
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000088 	.word	0x20000088

0800091c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_TIM6_Init+0x64>)
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <MX_TIM6_Init+0x68>)
 8000930:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32-1;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_TIM6_Init+0x64>)
 8000934:	221f      	movs	r2, #31
 8000936:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_TIM6_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_TIM6_Init+0x64>)
 8000940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000944:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_TIM6_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <MX_TIM6_Init+0x64>)
 800094e:	f002 f8d1 	bl	8002af4 <HAL_TIM_Base_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000958:	f000 f98c 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	4619      	mov	r1, r3
 8000968:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_TIM6_Init+0x64>)
 800096a:	f003 f9ff 	bl	8003d6c <HAL_TIMEx_MasterConfigSynchronization>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000974:	f000 f97e 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200000d4 	.word	0x200000d4
 8000984:	40001000 	.word	0x40001000

08000988 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_USART1_UART_Init+0x5c>)
 800098e:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <MX_USART1_UART_Init+0x60>)
 8000990:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_USART1_UART_Init+0x5c>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_USART1_UART_Init+0x5c>)
 800099c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009a0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_USART1_UART_Init+0x5c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART1_UART_Init+0x5c>)
 80009aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART1_UART_Init+0x5c>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART1_UART_Init+0x5c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART1_UART_Init+0x5c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART1_UART_Init+0x5c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART1_UART_Init+0x5c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART1_UART_Init+0x5c>)
 80009d0:	f003 fa50 	bl	8003e74 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80009da:	f000 f94b 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000120 	.word	0x20000120
 80009e8:	40013800 	.word	0x40013800

080009ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <MX_USART2_UART_Init+0x5c>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a30:	f003 fa20 	bl	8003e74 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a3a:	f000 f91b 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200001a4 	.word	0x200001a4
 8000a48:	40004400 	.word	0x40004400

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	4b2f      	ldr	r3, [pc, #188]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a2e      	ldr	r2, [pc, #184]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b29      	ldr	r3, [pc, #164]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a28      	ldr	r2, [pc, #160]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f640 7108 	movw	r1, #3848	; 0xf08
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab4:	f000 fe48 	bl	8001748 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|LD3_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	213a      	movs	r1, #58	; 0x3a
 8000abc:	4819      	ldr	r0, [pc, #100]	; (8000b24 <MX_GPIO_Init+0xd8>)
 8000abe:	f000 fe43 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA8 PA9 PA10
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000ac2:	f640 7308 	movw	r3, #3848	; 0xf08
 8000ac6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ade:	f000 fcc9 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ae2:	23f0      	movs	r3, #240	; 0xf0
 8000ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f000 fcbc 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 LD3_Pin PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD3_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8000afc:	233a      	movs	r3, #58	; 0x3a
 8000afe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	4619      	mov	r1, r3
 8000b12:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_GPIO_Init+0xd8>)
 8000b14:	f000 fcae 	bl	8001474 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b18:	bf00      	nop
 8000b1a:	3720      	adds	r7, #32
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40021000 	.word	0x40021000
 8000b24:	48000400 	.word	0x48000400

08000b28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//Timer interrupt callback 1ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d101      	bne.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		main_tick();
 8000b38:	f000 f856 	bl	8000be8 <main_tick>
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200000d4 	.word	0x200000d4

08000b48 <HAL_UART_RxCpltCallback>:
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)



{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000b50:	2201      	movs	r2, #1
 8000b52:	2108      	movs	r1, #8
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f000 fdf6 	bl	8001748 <HAL_GPIO_WritePin>
	if(huart == &huart1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <HAL_UART_RxCpltCallback+0x88>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d125      	bne.n	8000bb0 <HAL_UART_RxCpltCallback+0x68>
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000b64:	2108      	movs	r1, #8
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f000 fe05 	bl	8001778 <HAL_GPIO_TogglePin>
			HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, SIZE_DATA);
 8000b6e:	2206      	movs	r2, #6
 8000b70:	4918      	ldr	r1, [pc, #96]	; (8000bd4 <HAL_UART_RxCpltCallback+0x8c>)
 8000b72:	4817      	ldr	r0, [pc, #92]	; (8000bd0 <HAL_UART_RxCpltCallback+0x88>)
 8000b74:	f003 f9cc 	bl	8003f10 <HAL_UART_Receive_IT>




			if(strcmp(UART1_rxBuffer,clamp_string) == 0){
 8000b78:	4917      	ldr	r1, [pc, #92]	; (8000bd8 <HAL_UART_RxCpltCallback+0x90>)
 8000b7a:	4816      	ldr	r0, [pc, #88]	; (8000bd4 <HAL_UART_RxCpltCallback+0x8c>)
 8000b7c:	f7ff fb26 	bl	80001cc <strcmp>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d103      	bne.n	8000b8e <HAL_UART_RxCpltCallback+0x46>
				req_clamp_open = true;
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_UART_RxCpltCallback+0x94>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	e002      	b.n	8000b94 <HAL_UART_RxCpltCallback+0x4c>
			}
			else{
				req_clamp_open = false;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <HAL_UART_RxCpltCallback+0x94>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
			}
			if(strcmp(UART1_rxBuffer,EM_string) == 0){
 8000b94:	4912      	ldr	r1, [pc, #72]	; (8000be0 <HAL_UART_RxCpltCallback+0x98>)
 8000b96:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <HAL_UART_RxCpltCallback+0x8c>)
 8000b98:	f7ff fb18 	bl	80001cc <strcmp>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d103      	bne.n	8000baa <HAL_UART_RxCpltCallback+0x62>
							req_EM_open = true;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_UART_RxCpltCallback+0x9c>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	e002      	b.n	8000bb0 <HAL_UART_RxCpltCallback+0x68>
						}
						else{
							req_EM_open = false;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_UART_RxCpltCallback+0x9c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
						}
		}


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2108      	movs	r1, #8
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb8:	f000 fdc6 	bl	8001748 <HAL_GPIO_WritePin>
	memset(UART1_rxBuffer, 0, sizeof(UART1_rxBuffer)); //is it usesfull?
 8000bbc:	2206      	movs	r2, #6
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <HAL_UART_RxCpltCallback+0x8c>)
 8000bc2:	f004 fbd5 	bl	8005370 <memset>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000120 	.word	0x20000120
 8000bd4:	20000228 	.word	0x20000228
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	2000022e 	.word	0x2000022e
 8000be0:	20000008 	.word	0x20000008
 8000be4:	2000022f 	.word	0x2000022f

08000be8 <main_tick>:
	break;
	}
}

void main_tick()
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0

	status_led();
 8000bec:	f000 f82a 	bl	8000c44 <status_led>

	state = fsm_state_change(state, &req_clamp_open, &req_EM_open,flag_action);
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <main_tick+0x40>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <main_tick+0x44>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <main_tick+0x48>)
 8000bfc:	490d      	ldr	r1, [pc, #52]	; (8000c34 <main_tick+0x4c>)
 8000bfe:	f7ff fc71 	bl	80004e4 <fsm_state_change>
 8000c02:	4603      	mov	r3, r0
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <main_tick+0x40>)
 8000c08:	701a      	strb	r2, [r3, #0]
	flag_action = fsm_state_action(state,signal,&htim2,&htim1);
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <main_tick+0x40>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	4909      	ldr	r1, [pc, #36]	; (8000c38 <main_tick+0x50>)
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <main_tick+0x54>)
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <main_tick+0x58>)
 8000c16:	6809      	ldr	r1, [r1, #0]
 8000c18:	f7ff fcb2 	bl	8000580 <fsm_state_action>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <main_tick+0x44>)
 8000c22:	701a      	strb	r2, [r3, #0]
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000000e 	.word	0x2000000e
 8000c2c:	2000000f 	.word	0x2000000f
 8000c30:	2000022f 	.word	0x2000022f
 8000c34:	2000022e 	.word	0x2000022e
 8000c38:	20000230 	.word	0x20000230
 8000c3c:	2000003c 	.word	0x2000003c
 8000c40:	20000088 	.word	0x20000088

08000c44 <status_led>:

void status_led()
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	static uint16_t counter =0;
		counter++;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <status_led+0x2c>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <status_led+0x2c>)
 8000c52:	801a      	strh	r2, [r3, #0]
		if(counter == 1000){  //count up to 1000ms to 1s toggle
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <status_led+0x2c>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c5c:	d102      	bne.n	8000c64 <status_led+0x20>
			counter = 0;
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <status_led+0x2c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	801a      	strh	r2, [r3, #0]
			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);

			//Test uart TX
			//HAL_UART_Transmit(&huart1,"CIAO",4, 1000);
		}
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000234 	.word	0x20000234

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <Error_Handler+0x8>
	...

08000c80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <HAL_MspInit+0x44>)
 8000c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8a:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <HAL_MspInit+0x44>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6613      	str	r3, [r2, #96]	; 0x60
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <HAL_MspInit+0x44>)
 8000c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_MspInit+0x44>)
 8000ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <HAL_MspInit+0x44>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	6593      	str	r3, [r2, #88]	; 0x58
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_MspInit+0x44>)
 8000cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a1f      	ldr	r2, [pc, #124]	; (8000d54 <HAL_TIM_Base_MspInit+0x8c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d10c      	bne.n	8000cf4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cda:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <HAL_TIM_Base_MspInit+0x90>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	4a1e      	ldr	r2, [pc, #120]	; (8000d58 <HAL_TIM_Base_MspInit+0x90>)
 8000ce0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ce4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_TIM_Base_MspInit+0x90>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000cf2:	e02a      	b.n	8000d4a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cfc:	d10c      	bne.n	8000d18 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <HAL_TIM_Base_MspInit+0x90>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	4a15      	ldr	r2, [pc, #84]	; (8000d58 <HAL_TIM_Base_MspInit+0x90>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <HAL_TIM_Base_MspInit+0x90>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
}
 8000d16:	e018      	b.n	8000d4a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <HAL_TIM_Base_MspInit+0x94>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d113      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_TIM_Base_MspInit+0x90>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d26:	4a0c      	ldr	r2, [pc, #48]	; (8000d58 <HAL_TIM_Base_MspInit+0x90>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_TIM_Base_MspInit+0x90>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2036      	movs	r0, #54	; 0x36
 8000d40:	f000 fae3 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d44:	2036      	movs	r0, #54	; 0x36
 8000d46:	f000 fafc 	bl	8001342 <HAL_NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40012c00 	.word	0x40012c00
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40001000 	.word	0x40001000

08000d60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <HAL_TIM_MspPostInit+0xa8>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d11c      	bne.n	8000dbc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <HAL_TIM_MspPostInit+0xac>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <HAL_TIM_MspPostInit+0xac>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <HAL_TIM_MspPostInit+0xac>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4816      	ldr	r0, [pc, #88]	; (8000e10 <HAL_TIM_MspPostInit+0xb0>)
 8000db6:	f000 fb5d 	bl	8001474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dba:	e021      	b.n	8000e00 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc4:	d11c      	bne.n	8000e00 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_TIM_MspPostInit+0xac>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a10      	ldr	r2, [pc, #64]	; (8000e0c <HAL_TIM_MspPostInit+0xac>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_TIM_MspPostInit+0xac>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dde:	2302      	movs	r3, #2
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dee:	2301      	movs	r3, #1
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f000 fb3a 	bl	8001474 <HAL_GPIO_Init>
}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	; 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40012c00 	.word	0x40012c00
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	48000400 	.word	0x48000400

08000e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0a0      	sub	sp, #128	; 0x80
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e2c:	f107 0318 	add.w	r3, r7, #24
 8000e30:	2254      	movs	r2, #84	; 0x54
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f004 fa9b 	bl	8005370 <memset>
  if(huart->Instance==USART1)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a4a      	ldr	r2, [pc, #296]	; (8000f68 <HAL_UART_MspInit+0x154>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d13e      	bne.n	8000ec2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e44:	2301      	movs	r3, #1
 8000e46:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4c:	f107 0318 	add.w	r3, r7, #24
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 fb57 	bl	8002504 <HAL_RCCEx_PeriphCLKConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e5c:	f7ff ff0a 	bl	8000c74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e60:	4b42      	ldr	r3, [pc, #264]	; (8000f6c <HAL_UART_MspInit+0x158>)
 8000e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e64:	4a41      	ldr	r2, [pc, #260]	; (8000f6c <HAL_UART_MspInit+0x158>)
 8000e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e6c:	4b3f      	ldr	r3, [pc, #252]	; (8000f6c <HAL_UART_MspInit+0x158>)
 8000e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e78:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <HAL_UART_MspInit+0x158>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	4a3b      	ldr	r2, [pc, #236]	; (8000f6c <HAL_UART_MspInit+0x158>)
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e84:	4b39      	ldr	r3, [pc, #228]	; (8000f6c <HAL_UART_MspInit+0x158>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e90:	23c0      	movs	r3, #192	; 0xc0
 8000e92:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4831      	ldr	r0, [pc, #196]	; (8000f70 <HAL_UART_MspInit+0x15c>)
 8000eac:	f000 fae2 	bl	8001474 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2025      	movs	r0, #37	; 0x25
 8000eb6:	f000 fa28 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000eba:	2025      	movs	r0, #37	; 0x25
 8000ebc:	f000 fa41 	bl	8001342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ec0:	e04d      	b.n	8000f5e <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART2)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a2b      	ldr	r2, [pc, #172]	; (8000f74 <HAL_UART_MspInit+0x160>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d148      	bne.n	8000f5e <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 fb13 	bl	8002504 <HAL_RCCEx_PeriphCLKConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000ee4:	f7ff fec6 	bl	8000c74 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee8:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <HAL_UART_MspInit+0x158>)
 8000eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eec:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <HAL_UART_MspInit+0x158>)
 8000eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <HAL_UART_MspInit+0x158>)
 8000ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <HAL_UART_MspInit+0x158>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <HAL_UART_MspInit+0x158>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_UART_MspInit+0x158>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f18:	2304      	movs	r3, #4
 8000f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f28:	2307      	movs	r3, #7
 8000f2a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f000 fa9d 	bl	8001474 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5a:	f000 fa8b 	bl	8001474 <HAL_GPIO_Init>
}
 8000f5e:	bf00      	nop
 8000f60:	3780      	adds	r7, #128	; 0x80
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	48000400 	.word	0x48000400
 8000f74:	40004400 	.word	0x40004400

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <NMI_Handler+0x4>

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 f8a6 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <USART1_IRQHandler+0x10>)
 8000fd2:	f002 fff3 	bl	8003fbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000120 	.word	0x20000120

08000fe0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <TIM6_DAC_IRQHandler+0x10>)
 8000fe6:	f001 fff9 	bl	8002fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000d4 	.word	0x200000d4

08000ff4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <SystemInit+0x20>)
 8000ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <SystemInit+0x20>)
 8001000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001050 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800101c:	f7ff ffea 	bl	8000ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <LoopForever+0x6>)
  ldr r1, =_edata
 8001022:	490d      	ldr	r1, [pc, #52]	; (8001058 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <LoopForever+0xe>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001038:	4c0a      	ldr	r4, [pc, #40]	; (8001064 <LoopForever+0x16>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001046:	f004 f96f 	bl	8005328 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800104a:	f7ff fb11 	bl	8000670 <main>

0800104e <LoopForever>:

LoopForever:
    b LoopForever
 800104e:	e7fe      	b.n	800104e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001050:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800105c:	080053f0 	.word	0x080053f0
  ldr r2, =_sbss
 8001060:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001064:	2000023c 	.word	0x2000023c

08001068 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC1_IRQHandler>

0800106a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001074:	2003      	movs	r0, #3
 8001076:	f000 f93d 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800107a:	2000      	movs	r0, #0
 800107c:	f000 f80e 	bl	800109c <HAL_InitTick>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d002      	beq.n	800108c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	71fb      	strb	r3, [r7, #7]
 800108a:	e001      	b.n	8001090 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800108c:	f7ff fdf8 	bl	8000c80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001090:	79fb      	ldrb	r3, [r7, #7]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_InitTick+0x6c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d023      	beq.n	80010f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <HAL_InitTick+0x70>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_InitTick+0x6c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f949 	bl	800135e <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10f      	bne.n	80010f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b0f      	cmp	r3, #15
 80010d6:	d809      	bhi.n	80010ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f000 f913 	bl	800130a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_InitTick+0x74>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e007      	b.n	80010fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e004      	b.n	80010fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	e001      	b.n	80010fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000018 	.word	0x20000018
 800110c:	20000010 	.word	0x20000010
 8001110:	20000014 	.word	0x20000014

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000018 	.word	0x20000018
 8001138:	20000238 	.word	0x20000238

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000238 	.word	0x20000238

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800117c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db0b      	blt.n	80011e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 021f 	and.w	r2, r3, #31
 80011d0:	4907      	ldr	r1, [pc, #28]	; (80011f0 <__NVIC_EnableIRQ+0x38>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f202 	lsl.w	r2, r0, r2
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	; (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	; (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	; 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f7ff ff8e 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff29 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800131c:	f7ff ff3e 	bl	800119c <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff8e 	bl	8001248 <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5d 	bl	80011f4 <__NVIC_SetPriority>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff31 	bl	80011b8 <__NVIC_EnableIRQ>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ffa2 	bl	80012b0 <SysTick_Config>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001376:	b480      	push	{r7}
 8001378:	b085      	sub	sp, #20
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d008      	beq.n	80013a0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2204      	movs	r2, #4
 8001392:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e022      	b.n	80013e6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 020e 	bic.w	r2, r2, #14
 80013ae:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0201 	bic.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	f003 021c 	and.w	r2, r3, #28
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	2101      	movs	r1, #1
 80013ce:	fa01 f202 	lsl.w	r2, r1, r2
 80013d2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d005      	beq.n	8001416 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2204      	movs	r2, #4
 800140e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	e029      	b.n	800146a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 020e 	bic.w	r2, r2, #14
 8001424:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0201 	bic.w	r2, r2, #1
 8001434:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f003 021c 	and.w	r2, r3, #28
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	2101      	movs	r1, #1
 8001444:	fa01 f202 	lsl.w	r2, r1, r2
 8001448:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	4798      	blx	r3
    }
  }
  return status;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001482:	e148      	b.n	8001716 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2101      	movs	r1, #1
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	4013      	ands	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 813a 	beq.w	8001710 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d005      	beq.n	80014b4 <HAL_GPIO_Init+0x40>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d130      	bne.n	8001516 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ea:	2201      	movs	r2, #1
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	f003 0201 	and.w	r2, r3, #1
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b03      	cmp	r3, #3
 8001520:	d017      	beq.n	8001552 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d123      	bne.n	80015a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	08da      	lsrs	r2, r3, #3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3208      	adds	r2, #8
 8001566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	220f      	movs	r2, #15
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	691a      	ldr	r2, [r3, #16]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	08da      	lsrs	r2, r3, #3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3208      	adds	r2, #8
 80015a0:	6939      	ldr	r1, [r7, #16]
 80015a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	2203      	movs	r2, #3
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0203 	and.w	r2, r3, #3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8094 	beq.w	8001710 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e8:	4b52      	ldr	r3, [pc, #328]	; (8001734 <HAL_GPIO_Init+0x2c0>)
 80015ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ec:	4a51      	ldr	r2, [pc, #324]	; (8001734 <HAL_GPIO_Init+0x2c0>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6613      	str	r3, [r2, #96]	; 0x60
 80015f4:	4b4f      	ldr	r3, [pc, #316]	; (8001734 <HAL_GPIO_Init+0x2c0>)
 80015f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001600:	4a4d      	ldr	r2, [pc, #308]	; (8001738 <HAL_GPIO_Init+0x2c4>)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	3302      	adds	r3, #2
 8001608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	220f      	movs	r2, #15
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800162a:	d00d      	beq.n	8001648 <HAL_GPIO_Init+0x1d4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a43      	ldr	r2, [pc, #268]	; (800173c <HAL_GPIO_Init+0x2c8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d007      	beq.n	8001644 <HAL_GPIO_Init+0x1d0>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a42      	ldr	r2, [pc, #264]	; (8001740 <HAL_GPIO_Init+0x2cc>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d101      	bne.n	8001640 <HAL_GPIO_Init+0x1cc>
 800163c:	2302      	movs	r3, #2
 800163e:	e004      	b.n	800164a <HAL_GPIO_Init+0x1d6>
 8001640:	2307      	movs	r3, #7
 8001642:	e002      	b.n	800164a <HAL_GPIO_Init+0x1d6>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_GPIO_Init+0x1d6>
 8001648:	2300      	movs	r3, #0
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	f002 0203 	and.w	r2, r2, #3
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	4093      	lsls	r3, r2
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800165a:	4937      	ldr	r1, [pc, #220]	; (8001738 <HAL_GPIO_Init+0x2c4>)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001668:	4b36      	ldr	r3, [pc, #216]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	43db      	mvns	r3, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800168c:	4a2d      	ldr	r2, [pc, #180]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001692:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016b6:	4a23      	ldr	r2, [pc, #140]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016bc:	4b21      	ldr	r3, [pc, #132]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016e0:	4a18      	ldr	r2, [pc, #96]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800170a:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	f47f aeaf 	bne.w	8001484 <HAL_GPIO_Init+0x10>
  }
}
 8001726:	bf00      	nop
 8001728:	bf00      	nop
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	48000400 	.word	0x48000400
 8001740:	48000800 	.word	0x48000800
 8001744:	40010400 	.word	0x40010400

08001748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
 8001754:	4613      	mov	r3, r2
 8001756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001758:	787b      	ldrb	r3, [r7, #1]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001764:	e002      	b.n	800176c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4013      	ands	r3, r2
 8001790:	041a      	lsls	r2, r3, #16
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	43d9      	mvns	r1, r3
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	400b      	ands	r3, r1
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	619a      	str	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40007000 	.word	0x40007000

080017cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40007000 	.word	0x40007000

080017e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017f6:	d130      	bne.n	800185a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017f8:	4b23      	ldr	r3, [pc, #140]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001804:	d038      	beq.n	8001878 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800180e:	4a1e      	ldr	r2, [pc, #120]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001814:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2232      	movs	r2, #50	; 0x32
 800181c:	fb02 f303 	mul.w	r3, r2, r3
 8001820:	4a1b      	ldr	r2, [pc, #108]	; (8001890 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	0c9b      	lsrs	r3, r3, #18
 8001828:	3301      	adds	r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800182c:	e002      	b.n	8001834 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3b01      	subs	r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001840:	d102      	bne.n	8001848 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f2      	bne.n	800182e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001854:	d110      	bne.n	8001878 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e00f      	b.n	800187a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001866:	d007      	beq.n	8001878 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001870:	4a05      	ldr	r2, [pc, #20]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001876:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40007000 	.word	0x40007000
 800188c:	20000010 	.word	0x20000010
 8001890:	431bde83 	.word	0x431bde83

08001894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	f000 bc02 	b.w	80020ac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a8:	4b96      	ldr	r3, [pc, #600]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018b2:	4b94      	ldr	r3, [pc, #592]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0310 	and.w	r3, r3, #16
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80e4 	beq.w	8001a92 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d007      	beq.n	80018e0 <HAL_RCC_OscConfig+0x4c>
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	f040 808b 	bne.w	80019ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	f040 8087 	bne.w	80019ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018e0:	4b88      	ldr	r3, [pc, #544]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_OscConfig+0x64>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e3d9      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1a      	ldr	r2, [r3, #32]
 80018fc:	4b81      	ldr	r3, [pc, #516]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b00      	cmp	r3, #0
 8001906:	d004      	beq.n	8001912 <HAL_RCC_OscConfig+0x7e>
 8001908:	4b7e      	ldr	r3, [pc, #504]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001910:	e005      	b.n	800191e <HAL_RCC_OscConfig+0x8a>
 8001912:	4b7c      	ldr	r3, [pc, #496]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800191e:	4293      	cmp	r3, r2
 8001920:	d223      	bcs.n	800196a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fd8c 	bl	8002444 <RCC_SetFlashLatencyFromMSIRange>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e3ba      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001936:	4b73      	ldr	r3, [pc, #460]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a72      	ldr	r2, [pc, #456]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b70      	ldr	r3, [pc, #448]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	496d      	ldr	r1, [pc, #436]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001954:	4b6b      	ldr	r3, [pc, #428]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	4968      	ldr	r1, [pc, #416]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
 8001968:	e025      	b.n	80019b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800196a:	4b66      	ldr	r3, [pc, #408]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a65      	ldr	r2, [pc, #404]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001970:	f043 0308 	orr.w	r3, r3, #8
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	4960      	ldr	r1, [pc, #384]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001988:	4b5e      	ldr	r3, [pc, #376]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	495b      	ldr	r1, [pc, #364]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fd4c 	bl	8002444 <RCC_SetFlashLatencyFromMSIRange>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e37a      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019b6:	f000 fc81 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 80019ba:	4602      	mov	r2, r0
 80019bc:	4b51      	ldr	r3, [pc, #324]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	4950      	ldr	r1, [pc, #320]	; (8001b08 <HAL_RCC_OscConfig+0x274>)
 80019c8:	5ccb      	ldrb	r3, [r1, r3]
 80019ca:	f003 031f 	and.w	r3, r3, #31
 80019ce:	fa22 f303 	lsr.w	r3, r2, r3
 80019d2:	4a4e      	ldr	r2, [pc, #312]	; (8001b0c <HAL_RCC_OscConfig+0x278>)
 80019d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019d6:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fb5e 	bl	800109c <HAL_InitTick>
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d052      	beq.n	8001a90 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	e35e      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d032      	beq.n	8001a5c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019f6:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a42      	ldr	r2, [pc, #264]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a02:	f7ff fb9b 	bl	800113c <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a0a:	f7ff fb97 	bl	800113c <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e347      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a1c:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a28:	4b36      	ldr	r3, [pc, #216]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a35      	ldr	r2, [pc, #212]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	f043 0308 	orr.w	r3, r3, #8
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b33      	ldr	r3, [pc, #204]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4930      	ldr	r1, [pc, #192]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a46:	4b2f      	ldr	r3, [pc, #188]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	492b      	ldr	r1, [pc, #172]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
 8001a5a:	e01a      	b.n	8001a92 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a5c:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a62:	f023 0301 	bic.w	r3, r3, #1
 8001a66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fb68 	bl	800113c <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a70:	f7ff fb64 	bl	800113c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e314      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x1dc>
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d073      	beq.n	8001b86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x21c>
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2b0c      	cmp	r3, #12
 8001aa8:	d10e      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d10b      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d063      	beq.n	8001b84 <HAL_RCC_OscConfig+0x2f0>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d15f      	bne.n	8001b84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e2f1      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad0:	d106      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x24c>
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e025      	b.n	8001b2c <HAL_RCC_OscConfig+0x298>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae8:	d114      	bne.n	8001b14 <HAL_RCC_OscConfig+0x280>
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a02      	ldr	r2, [pc, #8]	; (8001b04 <HAL_RCC_OscConfig+0x270>)
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e013      	b.n	8001b2c <HAL_RCC_OscConfig+0x298>
 8001b04:	40021000 	.word	0x40021000
 8001b08:	08005398 	.word	0x08005398
 8001b0c:	20000010 	.word	0x20000010
 8001b10:	20000014 	.word	0x20000014
 8001b14:	4ba0      	ldr	r3, [pc, #640]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a9f      	ldr	r2, [pc, #636]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b9d      	ldr	r3, [pc, #628]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a9c      	ldr	r2, [pc, #624]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff fb02 	bl	800113c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fafe 	bl	800113c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e2ae      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b4e:	4b92      	ldr	r3, [pc, #584]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x2a8>
 8001b5a:	e014      	b.n	8001b86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff faee 	bl	800113c <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff faea 	bl	800113c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	; 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e29a      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b76:	4b88      	ldr	r3, [pc, #544]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x2d0>
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d060      	beq.n	8001c54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x310>
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	d119      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d116      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba4:	4b7c      	ldr	r3, [pc, #496]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_OscConfig+0x328>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e277      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbc:	4b76      	ldr	r3, [pc, #472]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	061b      	lsls	r3, r3, #24
 8001bca:	4973      	ldr	r1, [pc, #460]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd0:	e040      	b.n	8001c54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d023      	beq.n	8001c22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bda:	4b6f      	ldr	r3, [pc, #444]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a6e      	ldr	r2, [pc, #440]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be6:	f7ff faa9 	bl	800113c <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bee:	f7ff faa5 	bl	800113c <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e255      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c00:	4b65      	ldr	r3, [pc, #404]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0c:	4b62      	ldr	r3, [pc, #392]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	061b      	lsls	r3, r3, #24
 8001c1a:	495f      	ldr	r1, [pc, #380]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
 8001c20:	e018      	b.n	8001c54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c22:	4b5d      	ldr	r3, [pc, #372]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a5c      	ldr	r2, [pc, #368]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2e:	f7ff fa85 	bl	800113c <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c36:	f7ff fa81 	bl	800113c <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e231      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c48:	4b53      	ldr	r3, [pc, #332]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f0      	bne.n	8001c36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d03c      	beq.n	8001cda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d01c      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c68:	4b4b      	ldr	r3, [pc, #300]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6e:	4a4a      	ldr	r2, [pc, #296]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c78:	f7ff fa60 	bl	800113c <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c80:	f7ff fa5c 	bl	800113c <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e20c      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c92:	4b41      	ldr	r3, [pc, #260]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0ef      	beq.n	8001c80 <HAL_RCC_OscConfig+0x3ec>
 8001ca0:	e01b      	b.n	8001cda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca8:	4a3b      	ldr	r2, [pc, #236]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001caa:	f023 0301 	bic.w	r3, r3, #1
 8001cae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb2:	f7ff fa43 	bl	800113c <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cba:	f7ff fa3f 	bl	800113c <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e1ef      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ccc:	4b32      	ldr	r3, [pc, #200]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1ef      	bne.n	8001cba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 80a6 	beq.w	8001e34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10d      	bne.n	8001d14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	4a26      	ldr	r2, [pc, #152]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d02:	6593      	str	r3, [r2, #88]	; 0x58
 8001d04:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d10:	2301      	movs	r3, #1
 8001d12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d14:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <HAL_RCC_OscConfig+0x508>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d118      	bne.n	8001d52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d20:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <HAL_RCC_OscConfig+0x508>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <HAL_RCC_OscConfig+0x508>)
 8001d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2c:	f7ff fa06 	bl	800113c <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d34:	f7ff fa02 	bl	800113c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e1b2      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <HAL_RCC_OscConfig+0x508>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d108      	bne.n	8001d6c <HAL_RCC_OscConfig+0x4d8>
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d60:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d6a:	e029      	b.n	8001dc0 <HAL_RCC_OscConfig+0x52c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2b05      	cmp	r3, #5
 8001d72:	d115      	bne.n	8001da0 <HAL_RCC_OscConfig+0x50c>
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7a:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8a:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <HAL_RCC_OscConfig+0x504>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d94:	e014      	b.n	8001dc0 <HAL_RCC_OscConfig+0x52c>
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40007000 	.word	0x40007000
 8001da0:	4b9a      	ldr	r3, [pc, #616]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da6:	4a99      	ldr	r2, [pc, #612]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db0:	4b96      	ldr	r3, [pc, #600]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db6:	4a95      	ldr	r2, [pc, #596]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001db8:	f023 0304 	bic.w	r3, r3, #4
 8001dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d016      	beq.n	8001df6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc8:	f7ff f9b8 	bl	800113c <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd0:	f7ff f9b4 	bl	800113c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e162      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de6:	4b89      	ldr	r3, [pc, #548]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0ed      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x53c>
 8001df4:	e015      	b.n	8001e22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df6:	f7ff f9a1 	bl	800113c <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7ff f99d 	bl	800113c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e14b      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e14:	4b7d      	ldr	r3, [pc, #500]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ed      	bne.n	8001dfe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e22:	7ffb      	ldrb	r3, [r7, #31]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e28:	4b78      	ldr	r3, [pc, #480]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	4a77      	ldr	r2, [pc, #476]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d03c      	beq.n	8001eba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01c      	beq.n	8001e82 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e48:	4b70      	ldr	r3, [pc, #448]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e4e:	4a6f      	ldr	r2, [pc, #444]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff f970 	bl	800113c <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e60:	f7ff f96c 	bl	800113c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e11c      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e72:	4b66      	ldr	r3, [pc, #408]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ef      	beq.n	8001e60 <HAL_RCC_OscConfig+0x5cc>
 8001e80:	e01b      	b.n	8001eba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e82:	4b62      	ldr	r3, [pc, #392]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001e84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e88:	4a60      	ldr	r2, [pc, #384]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e92:	f7ff f953 	bl	800113c <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e9a:	f7ff f94f 	bl	800113c <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e0ff      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001eac:	4b57      	ldr	r3, [pc, #348]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1ef      	bne.n	8001e9a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80f3 	beq.w	80020aa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	f040 80c9 	bne.w	8002060 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ece:	4b4f      	ldr	r3, [pc, #316]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 0203 	and.w	r2, r3, #3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d12c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	3b01      	subs	r3, #1
 8001eee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d123      	bne.n	8001f3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d11b      	bne.n	8001f3c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d113      	bne.n	8001f3c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1e:	085b      	lsrs	r3, r3, #1
 8001f20:	3b01      	subs	r3, #1
 8001f22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d109      	bne.n	8001f3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	085b      	lsrs	r3, r3, #1
 8001f34:	3b01      	subs	r3, #1
 8001f36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d06b      	beq.n	8002014 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d062      	beq.n	8002008 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f42:	4b32      	ldr	r3, [pc, #200]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0ac      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f52:	4b2e      	ldr	r3, [pc, #184]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a2d      	ldr	r2, [pc, #180]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001f58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f5c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f5e:	f7ff f8ed 	bl	800113c <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f66:	f7ff f8e9 	bl	800113c <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e099      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f78:	4b24      	ldr	r3, [pc, #144]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f0      	bne.n	8001f66 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f84:	4b21      	ldr	r3, [pc, #132]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <HAL_RCC_OscConfig+0x77c>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f94:	3a01      	subs	r2, #1
 8001f96:	0112      	lsls	r2, r2, #4
 8001f98:	4311      	orrs	r1, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f9e:	0212      	lsls	r2, r2, #8
 8001fa0:	4311      	orrs	r1, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fa6:	0852      	lsrs	r2, r2, #1
 8001fa8:	3a01      	subs	r2, #1
 8001faa:	0552      	lsls	r2, r2, #21
 8001fac:	4311      	orrs	r1, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fb2:	0852      	lsrs	r2, r2, #1
 8001fb4:	3a01      	subs	r2, #1
 8001fb6:	0652      	lsls	r2, r2, #25
 8001fb8:	4311      	orrs	r1, r2
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fbe:	06d2      	lsls	r2, r2, #27
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	4912      	ldr	r1, [pc, #72]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fc8:	4b10      	ldr	r3, [pc, #64]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0f      	ldr	r2, [pc, #60]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a0c      	ldr	r2, [pc, #48]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001fda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fe0:	f7ff f8ac 	bl	800113c <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe8:	f7ff f8a8 	bl	800113c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e058      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffa:	4b04      	ldr	r3, [pc, #16]	; (800200c <HAL_RCC_OscConfig+0x778>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002006:	e050      	b.n	80020aa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e04f      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
 800200c:	40021000 	.word	0x40021000
 8002010:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <HAL_RCC_OscConfig+0x820>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d144      	bne.n	80020aa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <HAL_RCC_OscConfig+0x820>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a23      	ldr	r2, [pc, #140]	; (80020b4 <HAL_RCC_OscConfig+0x820>)
 8002026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800202a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800202c:	4b21      	ldr	r3, [pc, #132]	; (80020b4 <HAL_RCC_OscConfig+0x820>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a20      	ldr	r2, [pc, #128]	; (80020b4 <HAL_RCC_OscConfig+0x820>)
 8002032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002036:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002038:	f7ff f880 	bl	800113c <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002040:	f7ff f87c 	bl	800113c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e02c      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_RCC_OscConfig+0x820>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x7ac>
 800205e:	e024      	b.n	80020aa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2b0c      	cmp	r3, #12
 8002064:	d01f      	beq.n	80020a6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002066:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <HAL_RCC_OscConfig+0x820>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <HAL_RCC_OscConfig+0x820>)
 800206c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002072:	f7ff f863 	bl	800113c <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207a:	f7ff f85f 	bl	800113c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e00f      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_RCC_OscConfig+0x820>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f0      	bne.n	800207a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_RCC_OscConfig+0x820>)
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	4905      	ldr	r1, [pc, #20]	; (80020b4 <HAL_RCC_OscConfig+0x820>)
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_OscConfig+0x824>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	60cb      	str	r3, [r1, #12]
 80020a4:	e001      	b.n	80020aa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000
 80020b8:	feeefffc 	.word	0xfeeefffc

080020bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0e7      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b75      	ldr	r3, [pc, #468]	; (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d910      	bls.n	8002100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b72      	ldr	r3, [pc, #456]	; (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 0207 	bic.w	r2, r3, #7
 80020e6:	4970      	ldr	r1, [pc, #448]	; (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b6e      	ldr	r3, [pc, #440]	; (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0cf      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d010      	beq.n	800212e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	4b66      	ldr	r3, [pc, #408]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002118:	429a      	cmp	r2, r3
 800211a:	d908      	bls.n	800212e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211c:	4b63      	ldr	r3, [pc, #396]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4960      	ldr	r1, [pc, #384]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d04c      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002142:	4b5a      	ldr	r3, [pc, #360]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d121      	bne.n	8002192 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0a6      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800215a:	4b54      	ldr	r3, [pc, #336]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d115      	bne.n	8002192 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e09a      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002172:	4b4e      	ldr	r3, [pc, #312]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e08e      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002182:	4b4a      	ldr	r3, [pc, #296]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e086      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002192:	4b46      	ldr	r3, [pc, #280]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f023 0203 	bic.w	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4943      	ldr	r1, [pc, #268]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a4:	f7fe ffca 	bl	800113c <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7fe ffc6 	bl	800113c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e06e      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	4b3a      	ldr	r3, [pc, #232]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 020c 	and.w	r2, r3, #12
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d1eb      	bne.n	80021ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d010      	beq.n	8002202 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	4b31      	ldr	r3, [pc, #196]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d208      	bcs.n	8002202 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	492b      	ldr	r1, [pc, #172]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002202:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d210      	bcs.n	8002232 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f023 0207 	bic.w	r2, r3, #7
 8002218:	4923      	ldr	r1, [pc, #140]	; (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	4313      	orrs	r3, r2
 800221e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002220:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d001      	beq.n	8002232 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e036      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	4918      	ldr	r1, [pc, #96]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	4313      	orrs	r3, r2
 800224e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d009      	beq.n	8002270 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4910      	ldr	r1, [pc, #64]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800226c:	4313      	orrs	r3, r2
 800226e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002270:	f000 f824 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8002274:	4602      	mov	r2, r0
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	490b      	ldr	r1, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002282:	5ccb      	ldrb	r3, [r1, r3]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 800228e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1fc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe ff01 	bl	800109c <HAL_InitTick>
 800229a:	4603      	mov	r3, r0
 800229c:	72fb      	strb	r3, [r7, #11]

  return status;
 800229e:	7afb      	ldrb	r3, [r7, #11]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40022000 	.word	0x40022000
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08005398 	.word	0x08005398
 80022b4:	20000010 	.word	0x20000010
 80022b8:	20000014 	.word	0x20000014

080022bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	; 0x24
 80022c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ca:	4b3e      	ldr	r3, [pc, #248]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d4:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x34>
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d121      	bne.n	800232e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d11e      	bne.n	800232e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022f0:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d107      	bne.n	800230c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022fc:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	e005      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800230c:	4b2d      	ldr	r3, [pc, #180]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002318:	4a2b      	ldr	r2, [pc, #172]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10d      	bne.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	2b04      	cmp	r3, #4
 8002332:	d102      	bne.n	800233a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	e004      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b08      	cmp	r3, #8
 800233e:	d101      	bne.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002340:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002342:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d134      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d003      	beq.n	8002362 <HAL_RCC_GetSysClockFreq+0xa6>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d003      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0xac>
 8002360:	e005      	b.n	800236e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002362:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002364:	617b      	str	r3, [r7, #20]
      break;
 8002366:	e005      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002368:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800236a:	617b      	str	r3, [r7, #20]
      break;
 800236c:	e002      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	617b      	str	r3, [r7, #20]
      break;
 8002372:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	3301      	adds	r3, #1
 8002380:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	fb03 f202 	mul.w	r2, r3, r2
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	0e5b      	lsrs	r3, r3, #25
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	3301      	adds	r3, #1
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023b4:	69bb      	ldr	r3, [r7, #24]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	080053b0 	.word	0x080053b0
 80023cc:	00f42400 	.word	0x00f42400
 80023d0:	007a1200 	.word	0x007a1200

080023d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000010 	.word	0x20000010

080023ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023f0:	f7ff fff0 	bl	80023d4 <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4904      	ldr	r1, [pc, #16]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	080053a8 	.word	0x080053a8

08002418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800241c:	f7ff ffda 	bl	80023d4 <HAL_RCC_GetHCLKFreq>
 8002420:	4602      	mov	r2, r0
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	0adb      	lsrs	r3, r3, #11
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4904      	ldr	r1, [pc, #16]	; (8002440 <HAL_RCC_GetPCLK2Freq+0x28>)
 800242e:	5ccb      	ldrb	r3, [r1, r3]
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002438:	4618      	mov	r0, r3
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	080053a8 	.word	0x080053a8

08002444 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002450:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800245c:	f7ff f9b6 	bl	80017cc <HAL_PWREx_GetVoltageRange>
 8002460:	6178      	str	r0, [r7, #20]
 8002462:	e014      	b.n	800248e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002464:	4b25      	ldr	r3, [pc, #148]	; (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	4a24      	ldr	r2, [pc, #144]	; (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800246a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246e:	6593      	str	r3, [r2, #88]	; 0x58
 8002470:	4b22      	ldr	r3, [pc, #136]	; (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800247c:	f7ff f9a6 	bl	80017cc <HAL_PWREx_GetVoltageRange>
 8002480:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002482:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	4a1d      	ldr	r2, [pc, #116]	; (80024fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002494:	d10b      	bne.n	80024ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b80      	cmp	r3, #128	; 0x80
 800249a:	d919      	bls.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2ba0      	cmp	r3, #160	; 0xa0
 80024a0:	d902      	bls.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024a2:	2302      	movs	r3, #2
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	e013      	b.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024a8:	2301      	movs	r3, #1
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	e010      	b.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b80      	cmp	r3, #128	; 0x80
 80024b2:	d902      	bls.n	80024ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024b4:	2303      	movs	r3, #3
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	e00a      	b.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b80      	cmp	r3, #128	; 0x80
 80024be:	d102      	bne.n	80024c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024c0:	2302      	movs	r3, #2
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	e004      	b.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b70      	cmp	r3, #112	; 0x70
 80024ca:	d101      	bne.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024cc:	2301      	movs	r3, #1
 80024ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 0207 	bic.w	r2, r3, #7
 80024d8:	4909      	ldr	r1, [pc, #36]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d001      	beq.n	80024f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000
 8002500:	40022000 	.word	0x40022000

08002504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800250c:	2300      	movs	r3, #0
 800250e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002510:	2300      	movs	r3, #0
 8002512:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800251c:	2b00      	cmp	r3, #0
 800251e:	d031      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002524:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002528:	d01a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800252a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800252e:	d814      	bhi.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002530:	2b00      	cmp	r3, #0
 8002532:	d009      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002534:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002538:	d10f      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800253a:	4b5d      	ldr	r3, [pc, #372]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4a5c      	ldr	r2, [pc, #368]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002546:	e00c      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3304      	adds	r3, #4
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f000 f9de 	bl	8002910 <RCCEx_PLLSAI1_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002558:	e003      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	74fb      	strb	r3, [r7, #19]
      break;
 800255e:	e000      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002560:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002562:	7cfb      	ldrb	r3, [r7, #19]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10b      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002568:	4b51      	ldr	r3, [pc, #324]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	494e      	ldr	r1, [pc, #312]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800257e:	e001      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 809e 	beq.w	80026ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002596:	4b46      	ldr	r3, [pc, #280]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80025a6:	2300      	movs	r3, #0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00d      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ac:	4b40      	ldr	r3, [pc, #256]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	4a3f      	ldr	r2, [pc, #252]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b6:	6593      	str	r3, [r2, #88]	; 0x58
 80025b8:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c4:	2301      	movs	r3, #1
 80025c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025c8:	4b3a      	ldr	r3, [pc, #232]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a39      	ldr	r2, [pc, #228]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80025ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025d4:	f7fe fdb2 	bl	800113c <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025da:	e009      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025dc:	f7fe fdae 	bl	800113c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d902      	bls.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	74fb      	strb	r3, [r7, #19]
        break;
 80025ee:	e005      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025f0:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0ef      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80025fc:	7cfb      	ldrb	r3, [r7, #19]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d15a      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002602:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01e      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	429a      	cmp	r2, r3
 800261c:	d019      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800261e:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002628:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800262a:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002630:	4a1f      	ldr	r2, [pc, #124]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800263a:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002640:	4a1b      	ldr	r2, [pc, #108]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800264a:	4a19      	ldr	r2, [pc, #100]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d016      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe fd6e 	bl	800113c <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002662:	e00b      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002664:	f7fe fd6a 	bl	800113c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d902      	bls.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	74fb      	strb	r3, [r7, #19]
            break;
 800267a:	e006      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0ec      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002690:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269e:	4904      	ldr	r1, [pc, #16]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026a6:	e009      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	74bb      	strb	r3, [r7, #18]
 80026ac:	e006      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b8:	7cfb      	ldrb	r3, [r7, #19]
 80026ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026bc:	7c7b      	ldrb	r3, [r7, #17]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d105      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c2:	4b8a      	ldr	r3, [pc, #552]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c6:	4a89      	ldr	r2, [pc, #548]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026da:	4b84      	ldr	r3, [pc, #528]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f023 0203 	bic.w	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4980      	ldr	r1, [pc, #512]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026fc:	4b7b      	ldr	r3, [pc, #492]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f023 020c 	bic.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	4978      	ldr	r1, [pc, #480]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800271e:	4b73      	ldr	r3, [pc, #460]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	496f      	ldr	r1, [pc, #444]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002740:	4b6a      	ldr	r3, [pc, #424]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274e:	4967      	ldr	r1, [pc, #412]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002762:	4b62      	ldr	r3, [pc, #392]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002770:	495e      	ldr	r1, [pc, #376]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002784:	4b59      	ldr	r3, [pc, #356]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	4956      	ldr	r1, [pc, #344]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027a6:	4b51      	ldr	r3, [pc, #324]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	494d      	ldr	r1, [pc, #308]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d028      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027c8:	4b48      	ldr	r3, [pc, #288]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4945      	ldr	r1, [pc, #276]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027e6:	d106      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e8:	4b40      	ldr	r3, [pc, #256]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4a3f      	ldr	r2, [pc, #252]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027f2:	60d3      	str	r3, [r2, #12]
 80027f4:	e011      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027fe:	d10c      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3304      	adds	r3, #4
 8002804:	2101      	movs	r1, #1
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f882 	bl	8002910 <RCCEx_PLLSAI1_Config>
 800280c:	4603      	mov	r3, r0
 800280e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002816:	7cfb      	ldrb	r3, [r7, #19]
 8002818:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d028      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002826:	4b31      	ldr	r3, [pc, #196]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002834:	492d      	ldr	r1, [pc, #180]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002844:	d106      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	4a28      	ldr	r2, [pc, #160]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800284c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002850:	60d3      	str	r3, [r2, #12]
 8002852:	e011      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800285c:	d10c      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3304      	adds	r3, #4
 8002862:	2101      	movs	r1, #1
 8002864:	4618      	mov	r0, r3
 8002866:	f000 f853 	bl	8002910 <RCCEx_PLLSAI1_Config>
 800286a:	4603      	mov	r3, r0
 800286c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800286e:	7cfb      	ldrb	r3, [r7, #19]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002874:	7cfb      	ldrb	r3, [r7, #19]
 8002876:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01c      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002884:	4b19      	ldr	r3, [pc, #100]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002892:	4916      	ldr	r1, [pc, #88]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028a2:	d10c      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3304      	adds	r3, #4
 80028a8:	2102      	movs	r1, #2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f830 	bl	8002910 <RCCEx_PLLSAI1_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028b4:	7cfb      	ldrb	r3, [r7, #19]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80028ba:	7cfb      	ldrb	r3, [r7, #19]
 80028bc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d8:	4904      	ldr	r1, [pc, #16]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000

080028f0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a04      	ldr	r2, [pc, #16]	; (800290c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6013      	str	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000

08002910 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800291e:	4b74      	ldr	r3, [pc, #464]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d018      	beq.n	800295c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800292a:	4b71      	ldr	r3, [pc, #452]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0203 	and.w	r2, r3, #3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d10d      	bne.n	8002956 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
       ||
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002942:	4b6b      	ldr	r3, [pc, #428]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
       ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d047      	beq.n	80029e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
 800295a:	e044      	b.n	80029e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d018      	beq.n	8002996 <RCCEx_PLLSAI1_Config+0x86>
 8002964:	2b03      	cmp	r3, #3
 8002966:	d825      	bhi.n	80029b4 <RCCEx_PLLSAI1_Config+0xa4>
 8002968:	2b01      	cmp	r3, #1
 800296a:	d002      	beq.n	8002972 <RCCEx_PLLSAI1_Config+0x62>
 800296c:	2b02      	cmp	r3, #2
 800296e:	d009      	beq.n	8002984 <RCCEx_PLLSAI1_Config+0x74>
 8002970:	e020      	b.n	80029b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002972:	4b5f      	ldr	r3, [pc, #380]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d11d      	bne.n	80029ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002982:	e01a      	b.n	80029ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002984:	4b5a      	ldr	r3, [pc, #360]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298c:	2b00      	cmp	r3, #0
 800298e:	d116      	bne.n	80029be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002994:	e013      	b.n	80029be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002996:	4b56      	ldr	r3, [pc, #344]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10f      	bne.n	80029c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029a2:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029b2:	e006      	b.n	80029c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
      break;
 80029b8:	e004      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ba:	bf00      	nop
 80029bc:	e002      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029be:	bf00      	nop
 80029c0:	e000      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10d      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ca:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	3b01      	subs	r3, #1
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	430b      	orrs	r3, r1
 80029e0:	4943      	ldr	r1, [pc, #268]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d17c      	bne.n	8002ae6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029ec:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a3f      	ldr	r2, [pc, #252]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f8:	f7fe fba0 	bl	800113c <HAL_GetTick>
 80029fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029fe:	e009      	b.n	8002a14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a00:	f7fe fb9c 	bl	800113c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d902      	bls.n	8002a14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	73fb      	strb	r3, [r7, #15]
        break;
 8002a12:	e005      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a14:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ef      	bne.n	8002a00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d15f      	bne.n	8002ae6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d110      	bne.n	8002a4e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a2c:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002a34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6892      	ldr	r2, [r2, #8]
 8002a3c:	0211      	lsls	r1, r2, #8
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68d2      	ldr	r2, [r2, #12]
 8002a42:	06d2      	lsls	r2, r2, #27
 8002a44:	430a      	orrs	r2, r1
 8002a46:	492a      	ldr	r1, [pc, #168]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	610b      	str	r3, [r1, #16]
 8002a4c:	e027      	b.n	8002a9e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d112      	bne.n	8002a7a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a54:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6892      	ldr	r2, [r2, #8]
 8002a64:	0211      	lsls	r1, r2, #8
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6912      	ldr	r2, [r2, #16]
 8002a6a:	0852      	lsrs	r2, r2, #1
 8002a6c:	3a01      	subs	r2, #1
 8002a6e:	0552      	lsls	r2, r2, #21
 8002a70:	430a      	orrs	r2, r1
 8002a72:	491f      	ldr	r1, [pc, #124]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	610b      	str	r3, [r1, #16]
 8002a78:	e011      	b.n	8002a9e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6892      	ldr	r2, [r2, #8]
 8002a8a:	0211      	lsls	r1, r2, #8
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6952      	ldr	r2, [r2, #20]
 8002a90:	0852      	lsrs	r2, r2, #1
 8002a92:	3a01      	subs	r2, #1
 8002a94:	0652      	lsls	r2, r2, #25
 8002a96:	430a      	orrs	r2, r1
 8002a98:	4915      	ldr	r1, [pc, #84]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aa8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fb47 	bl	800113c <HAL_GetTick>
 8002aae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ab0:	e009      	b.n	8002ac6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ab2:	f7fe fb43 	bl	800113c <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d902      	bls.n	8002ac6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	73fb      	strb	r3, [r7, #15]
          break;
 8002ac4:	e005      	b.n	8002ad2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0ef      	beq.n	8002ab2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d106      	bne.n	8002ae6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	4903      	ldr	r1, [pc, #12]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000

08002af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e049      	b.n	8002b9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe f8d4 	bl	8000cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	4619      	mov	r1, r3
 8002b32:	4610      	mov	r0, r2
 8002b34:	f000 fd78 	bl	8003628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d001      	beq.n	8002bbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e03b      	b.n	8002c34 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <HAL_TIM_Base_Start_IT+0x9c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d009      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x4e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be6:	d004      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x4e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <HAL_TIM_Base_Start_IT+0xa0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d115      	bne.n	8002c1e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <HAL_TIM_Base_Start_IT+0xa4>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b06      	cmp	r3, #6
 8002c02:	d015      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0x8c>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0a:	d011      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1c:	e008      	b.n	8002c30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e000      	b.n	8002c32 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	40012c00 	.word	0x40012c00
 8002c44:	40014000 	.word	0x40014000
 8002c48:	00010007 	.word	0x00010007

08002c4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e049      	b.n	8002cf2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f841 	bl	8002cfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f000 fccc 	bl	8003628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <HAL_TIM_PWM_Start+0x24>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e03c      	b.n	8002dae <HAL_TIM_PWM_Start+0x9e>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d109      	bne.n	8002d4e <HAL_TIM_PWM_Start+0x3e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	bf14      	ite	ne
 8002d46:	2301      	movne	r3, #1
 8002d48:	2300      	moveq	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	e02f      	b.n	8002dae <HAL_TIM_PWM_Start+0x9e>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d109      	bne.n	8002d68 <HAL_TIM_PWM_Start+0x58>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	bf14      	ite	ne
 8002d60:	2301      	movne	r3, #1
 8002d62:	2300      	moveq	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	e022      	b.n	8002dae <HAL_TIM_PWM_Start+0x9e>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b0c      	cmp	r3, #12
 8002d6c:	d109      	bne.n	8002d82 <HAL_TIM_PWM_Start+0x72>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	bf14      	ite	ne
 8002d7a:	2301      	movne	r3, #1
 8002d7c:	2300      	moveq	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	e015      	b.n	8002dae <HAL_TIM_PWM_Start+0x9e>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d109      	bne.n	8002d9c <HAL_TIM_PWM_Start+0x8c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	bf14      	ite	ne
 8002d94:	2301      	movne	r3, #1
 8002d96:	2300      	moveq	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	e008      	b.n	8002dae <HAL_TIM_PWM_Start+0x9e>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e07e      	b.n	8002eb4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d104      	bne.n	8002dc6 <HAL_TIM_PWM_Start+0xb6>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dc4:	e023      	b.n	8002e0e <HAL_TIM_PWM_Start+0xfe>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d104      	bne.n	8002dd6 <HAL_TIM_PWM_Start+0xc6>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd4:	e01b      	b.n	8002e0e <HAL_TIM_PWM_Start+0xfe>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d104      	bne.n	8002de6 <HAL_TIM_PWM_Start+0xd6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de4:	e013      	b.n	8002e0e <HAL_TIM_PWM_Start+0xfe>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b0c      	cmp	r3, #12
 8002dea:	d104      	bne.n	8002df6 <HAL_TIM_PWM_Start+0xe6>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002df4:	e00b      	b.n	8002e0e <HAL_TIM_PWM_Start+0xfe>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b10      	cmp	r3, #16
 8002dfa:	d104      	bne.n	8002e06 <HAL_TIM_PWM_Start+0xf6>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e04:	e003      	b.n	8002e0e <HAL_TIM_PWM_Start+0xfe>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2201      	movs	r2, #1
 8002e14:	6839      	ldr	r1, [r7, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 ff82 	bl	8003d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <HAL_TIM_PWM_Start+0x1ac>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d009      	beq.n	8002e3a <HAL_TIM_PWM_Start+0x12a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <HAL_TIM_PWM_Start+0x1b0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_TIM_PWM_Start+0x12a>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a23      	ldr	r2, [pc, #140]	; (8002ec4 <HAL_TIM_PWM_Start+0x1b4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_TIM_PWM_Start+0x12e>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_TIM_PWM_Start+0x130>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <HAL_TIM_PWM_Start+0x1ac>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d009      	beq.n	8002e72 <HAL_TIM_PWM_Start+0x162>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e66:	d004      	beq.n	8002e72 <HAL_TIM_PWM_Start+0x162>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <HAL_TIM_PWM_Start+0x1b0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d115      	bne.n	8002e9e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <HAL_TIM_PWM_Start+0x1b8>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b06      	cmp	r3, #6
 8002e82:	d015      	beq.n	8002eb0 <HAL_TIM_PWM_Start+0x1a0>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8a:	d011      	beq.n	8002eb0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9c:	e008      	b.n	8002eb0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f042 0201 	orr.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	e000      	b.n	8002eb2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40012c00 	.word	0x40012c00
 8002ec0:	40014000 	.word	0x40014000
 8002ec4:	40014400 	.word	0x40014400
 8002ec8:	00010007 	.word	0x00010007

08002ecc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2200      	movs	r2, #0
 8002edc:	6839      	ldr	r1, [r7, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 ff1e 	bl	8003d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a39      	ldr	r2, [pc, #228]	; (8002fd0 <HAL_TIM_PWM_Stop+0x104>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d009      	beq.n	8002f02 <HAL_TIM_PWM_Stop+0x36>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a38      	ldr	r2, [pc, #224]	; (8002fd4 <HAL_TIM_PWM_Stop+0x108>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d004      	beq.n	8002f02 <HAL_TIM_PWM_Stop+0x36>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a36      	ldr	r2, [pc, #216]	; (8002fd8 <HAL_TIM_PWM_Stop+0x10c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d101      	bne.n	8002f06 <HAL_TIM_PWM_Stop+0x3a>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_TIM_PWM_Stop+0x3c>
 8002f06:	2300      	movs	r3, #0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d017      	beq.n	8002f3c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6a1a      	ldr	r2, [r3, #32]
 8002f12:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10f      	bne.n	8002f3c <HAL_TIM_PWM_Stop+0x70>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6a1a      	ldr	r2, [r3, #32]
 8002f22:	f240 4344 	movw	r3, #1092	; 0x444
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d107      	bne.n	8002f3c <HAL_TIM_PWM_Stop+0x70>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6a1a      	ldr	r2, [r3, #32]
 8002f42:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10f      	bne.n	8002f6c <HAL_TIM_PWM_Stop+0xa0>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6a1a      	ldr	r2, [r3, #32]
 8002f52:	f240 4344 	movw	r3, #1092	; 0x444
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d107      	bne.n	8002f6c <HAL_TIM_PWM_Stop+0xa0>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <HAL_TIM_PWM_Stop+0xb0>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f7a:	e023      	b.n	8002fc4 <HAL_TIM_PWM_Stop+0xf8>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d104      	bne.n	8002f8c <HAL_TIM_PWM_Stop+0xc0>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f8a:	e01b      	b.n	8002fc4 <HAL_TIM_PWM_Stop+0xf8>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d104      	bne.n	8002f9c <HAL_TIM_PWM_Stop+0xd0>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f9a:	e013      	b.n	8002fc4 <HAL_TIM_PWM_Stop+0xf8>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b0c      	cmp	r3, #12
 8002fa0:	d104      	bne.n	8002fac <HAL_TIM_PWM_Stop+0xe0>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002faa:	e00b      	b.n	8002fc4 <HAL_TIM_PWM_Stop+0xf8>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b10      	cmp	r3, #16
 8002fb0:	d104      	bne.n	8002fbc <HAL_TIM_PWM_Stop+0xf0>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fba:	e003      	b.n	8002fc4 <HAL_TIM_PWM_Stop+0xf8>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40014000 	.word	0x40014000
 8002fd8:	40014400 	.word	0x40014400

08002fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d122      	bne.n	8003038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d11b      	bne.n	8003038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0202 	mvn.w	r2, #2
 8003008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fae3 	bl	80035ea <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fad5 	bl	80035d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fae6 	bl	80035fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b04      	cmp	r3, #4
 8003044:	d122      	bne.n	800308c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b04      	cmp	r3, #4
 8003052:	d11b      	bne.n	800308c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0204 	mvn.w	r2, #4
 800305c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2202      	movs	r2, #2
 8003062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fab9 	bl	80035ea <HAL_TIM_IC_CaptureCallback>
 8003078:	e005      	b.n	8003086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 faab 	bl	80035d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fabc 	bl	80035fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b08      	cmp	r3, #8
 8003098:	d122      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d11b      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0208 	mvn.w	r2, #8
 80030b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2204      	movs	r2, #4
 80030b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fa8f 	bl	80035ea <HAL_TIM_IC_CaptureCallback>
 80030cc:	e005      	b.n	80030da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fa81 	bl	80035d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fa92 	bl	80035fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	2b10      	cmp	r3, #16
 80030ec:	d122      	bne.n	8003134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d11b      	bne.n	8003134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0210 	mvn.w	r2, #16
 8003104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2208      	movs	r2, #8
 800310a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fa65 	bl	80035ea <HAL_TIM_IC_CaptureCallback>
 8003120:	e005      	b.n	800312e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fa57 	bl	80035d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fa68 	bl	80035fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d10e      	bne.n	8003160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b01      	cmp	r3, #1
 800314e:	d107      	bne.n	8003160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0201 	mvn.w	r2, #1
 8003158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fd fce4 	bl	8000b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316a:	2b80      	cmp	r3, #128	; 0x80
 800316c:	d10e      	bne.n	800318c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003178:	2b80      	cmp	r3, #128	; 0x80
 800317a:	d107      	bne.n	800318c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fe60 	bl	8003e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319a:	d10e      	bne.n	80031ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a6:	2b80      	cmp	r3, #128	; 0x80
 80031a8:	d107      	bne.n	80031ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fe53 	bl	8003e60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d10e      	bne.n	80031e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d2:	2b40      	cmp	r3, #64	; 0x40
 80031d4:	d107      	bne.n	80031e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fa16 	bl	8003612 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d10e      	bne.n	8003212 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b20      	cmp	r3, #32
 8003200:	d107      	bne.n	8003212 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f06f 0220 	mvn.w	r2, #32
 800320a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fe13 	bl	8003e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003236:	2302      	movs	r3, #2
 8003238:	e0ff      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b14      	cmp	r3, #20
 8003246:	f200 80f0 	bhi.w	800342a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800324a:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800324c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003250:	080032a5 	.word	0x080032a5
 8003254:	0800342b 	.word	0x0800342b
 8003258:	0800342b 	.word	0x0800342b
 800325c:	0800342b 	.word	0x0800342b
 8003260:	080032e5 	.word	0x080032e5
 8003264:	0800342b 	.word	0x0800342b
 8003268:	0800342b 	.word	0x0800342b
 800326c:	0800342b 	.word	0x0800342b
 8003270:	08003327 	.word	0x08003327
 8003274:	0800342b 	.word	0x0800342b
 8003278:	0800342b 	.word	0x0800342b
 800327c:	0800342b 	.word	0x0800342b
 8003280:	08003367 	.word	0x08003367
 8003284:	0800342b 	.word	0x0800342b
 8003288:	0800342b 	.word	0x0800342b
 800328c:	0800342b 	.word	0x0800342b
 8003290:	080033a9 	.word	0x080033a9
 8003294:	0800342b 	.word	0x0800342b
 8003298:	0800342b 	.word	0x0800342b
 800329c:	0800342b 	.word	0x0800342b
 80032a0:	080033e9 	.word	0x080033e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fa20 	bl	80036f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0208 	orr.w	r2, r2, #8
 80032be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0204 	bic.w	r2, r2, #4
 80032ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6999      	ldr	r1, [r3, #24]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	691a      	ldr	r2, [r3, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	619a      	str	r2, [r3, #24]
      break;
 80032e2:	e0a5      	b.n	8003430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fa7c 	bl	80037e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6999      	ldr	r1, [r3, #24]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	021a      	lsls	r2, r3, #8
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	619a      	str	r2, [r3, #24]
      break;
 8003324:	e084      	b.n	8003430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fad5 	bl	80038dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0208 	orr.w	r2, r2, #8
 8003340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0204 	bic.w	r2, r2, #4
 8003350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69d9      	ldr	r1, [r3, #28]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	61da      	str	r2, [r3, #28]
      break;
 8003364:	e064      	b.n	8003430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fb2d 	bl	80039cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69da      	ldr	r2, [r3, #28]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69d9      	ldr	r1, [r3, #28]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	021a      	lsls	r2, r3, #8
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	61da      	str	r2, [r3, #28]
      break;
 80033a6:	e043      	b.n	8003430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fb6a 	bl	8003a88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0208 	orr.w	r2, r2, #8
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0204 	bic.w	r2, r2, #4
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033e6:	e023      	b.n	8003430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fba2 	bl	8003b38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003402:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	021a      	lsls	r2, r3, #8
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003428:	e002      	b.n	8003430 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	75fb      	strb	r3, [r7, #23]
      break;
 800342e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003438:	7dfb      	ldrb	r3, [r7, #23]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop

08003444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_TIM_ConfigClockSource+0x1c>
 800345c:	2302      	movs	r3, #2
 800345e:	e0b6      	b.n	80035ce <HAL_TIM_ConfigClockSource+0x18a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800348a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349c:	d03e      	beq.n	800351c <HAL_TIM_ConfigClockSource+0xd8>
 800349e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a2:	f200 8087 	bhi.w	80035b4 <HAL_TIM_ConfigClockSource+0x170>
 80034a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034aa:	f000 8086 	beq.w	80035ba <HAL_TIM_ConfigClockSource+0x176>
 80034ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b2:	d87f      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x170>
 80034b4:	2b70      	cmp	r3, #112	; 0x70
 80034b6:	d01a      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0xaa>
 80034b8:	2b70      	cmp	r3, #112	; 0x70
 80034ba:	d87b      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x170>
 80034bc:	2b60      	cmp	r3, #96	; 0x60
 80034be:	d050      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x11e>
 80034c0:	2b60      	cmp	r3, #96	; 0x60
 80034c2:	d877      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x170>
 80034c4:	2b50      	cmp	r3, #80	; 0x50
 80034c6:	d03c      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0xfe>
 80034c8:	2b50      	cmp	r3, #80	; 0x50
 80034ca:	d873      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x170>
 80034cc:	2b40      	cmp	r3, #64	; 0x40
 80034ce:	d058      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x13e>
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d86f      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x170>
 80034d4:	2b30      	cmp	r3, #48	; 0x30
 80034d6:	d064      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x15e>
 80034d8:	2b30      	cmp	r3, #48	; 0x30
 80034da:	d86b      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x170>
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d060      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x15e>
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d867      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x170>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d05c      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x15e>
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d05a      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x15e>
 80034ec:	e062      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6899      	ldr	r1, [r3, #8]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f000 fbef 	bl	8003ce0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003510:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	609a      	str	r2, [r3, #8]
      break;
 800351a:	e04f      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f000 fbd8 	bl	8003ce0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800353e:	609a      	str	r2, [r3, #8]
      break;
 8003540:	e03c      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6859      	ldr	r1, [r3, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	461a      	mov	r2, r3
 8003550:	f000 fb4c 	bl	8003bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2150      	movs	r1, #80	; 0x50
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fba5 	bl	8003caa <TIM_ITRx_SetConfig>
      break;
 8003560:	e02c      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6859      	ldr	r1, [r3, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	461a      	mov	r2, r3
 8003570:	f000 fb6b 	bl	8003c4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2160      	movs	r1, #96	; 0x60
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fb95 	bl	8003caa <TIM_ITRx_SetConfig>
      break;
 8003580:	e01c      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	461a      	mov	r2, r3
 8003590:	f000 fb2c 	bl	8003bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2140      	movs	r1, #64	; 0x40
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fb85 	bl	8003caa <TIM_ITRx_SetConfig>
      break;
 80035a0:	e00c      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f000 fb7c 	bl	8003caa <TIM_ITRx_SetConfig>
      break;
 80035b2:	e003      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
      break;
 80035b8:	e000      	b.n	80035bc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80035ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a2a      	ldr	r2, [pc, #168]	; (80036e4 <TIM_Base_SetConfig+0xbc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_Base_SetConfig+0x20>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003646:	d108      	bne.n	800365a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a21      	ldr	r2, [pc, #132]	; (80036e4 <TIM_Base_SetConfig+0xbc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00b      	beq.n	800367a <TIM_Base_SetConfig+0x52>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003668:	d007      	beq.n	800367a <TIM_Base_SetConfig+0x52>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a1e      	ldr	r2, [pc, #120]	; (80036e8 <TIM_Base_SetConfig+0xc0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d003      	beq.n	800367a <TIM_Base_SetConfig+0x52>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <TIM_Base_SetConfig+0xc4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d108      	bne.n	800368c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <TIM_Base_SetConfig+0xbc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d007      	beq.n	80036c8 <TIM_Base_SetConfig+0xa0>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a0b      	ldr	r2, [pc, #44]	; (80036e8 <TIM_Base_SetConfig+0xc0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <TIM_Base_SetConfig+0xa0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <TIM_Base_SetConfig+0xc4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d103      	bne.n	80036d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	615a      	str	r2, [r3, #20]
}
 80036d6:	bf00      	nop
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40014000 	.word	0x40014000
 80036ec:	40014400 	.word	0x40014400

080036f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f023 0201 	bic.w	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0303 	bic.w	r3, r3, #3
 800372a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f023 0302 	bic.w	r3, r3, #2
 800373c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a24      	ldr	r2, [pc, #144]	; (80037dc <TIM_OC1_SetConfig+0xec>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d007      	beq.n	8003760 <TIM_OC1_SetConfig+0x70>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a23      	ldr	r2, [pc, #140]	; (80037e0 <TIM_OC1_SetConfig+0xf0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_OC1_SetConfig+0x70>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a22      	ldr	r2, [pc, #136]	; (80037e4 <TIM_OC1_SetConfig+0xf4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d10c      	bne.n	800377a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 0308 	bic.w	r3, r3, #8
 8003766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f023 0304 	bic.w	r3, r3, #4
 8003778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a17      	ldr	r2, [pc, #92]	; (80037dc <TIM_OC1_SetConfig+0xec>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <TIM_OC1_SetConfig+0xa2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a16      	ldr	r2, [pc, #88]	; (80037e0 <TIM_OC1_SetConfig+0xf0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_OC1_SetConfig+0xa2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <TIM_OC1_SetConfig+0xf4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d111      	bne.n	80037b6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	621a      	str	r2, [r3, #32]
}
 80037d0:	bf00      	nop
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	40012c00 	.word	0x40012c00
 80037e0:	40014000 	.word	0x40014000
 80037e4:	40014400 	.word	0x40014400

080037e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f023 0210 	bic.w	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f023 0320 	bic.w	r3, r3, #32
 8003836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a22      	ldr	r2, [pc, #136]	; (80038d0 <TIM_OC2_SetConfig+0xe8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10d      	bne.n	8003868 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a19      	ldr	r2, [pc, #100]	; (80038d0 <TIM_OC2_SetConfig+0xe8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d007      	beq.n	8003880 <TIM_OC2_SetConfig+0x98>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <TIM_OC2_SetConfig+0xec>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d003      	beq.n	8003880 <TIM_OC2_SetConfig+0x98>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a17      	ldr	r2, [pc, #92]	; (80038d8 <TIM_OC2_SetConfig+0xf0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d113      	bne.n	80038a8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800388e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	621a      	str	r2, [r3, #32]
}
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40014000 	.word	0x40014000
 80038d8:	40014400 	.word	0x40014400

080038dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0303 	bic.w	r3, r3, #3
 8003916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a21      	ldr	r2, [pc, #132]	; (80039c0 <TIM_OC3_SetConfig+0xe4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d10d      	bne.n	800395a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a18      	ldr	r2, [pc, #96]	; (80039c0 <TIM_OC3_SetConfig+0xe4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d007      	beq.n	8003972 <TIM_OC3_SetConfig+0x96>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a17      	ldr	r2, [pc, #92]	; (80039c4 <TIM_OC3_SetConfig+0xe8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d003      	beq.n	8003972 <TIM_OC3_SetConfig+0x96>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <TIM_OC3_SetConfig+0xec>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d113      	bne.n	800399a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	621a      	str	r2, [r3, #32]
}
 80039b4:	bf00      	nop
 80039b6:	371c      	adds	r7, #28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	40012c00 	.word	0x40012c00
 80039c4:	40014000 	.word	0x40014000
 80039c8:	40014400 	.word	0x40014400

080039cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	031b      	lsls	r3, r3, #12
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a14      	ldr	r2, [pc, #80]	; (8003a7c <TIM_OC4_SetConfig+0xb0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d007      	beq.n	8003a40 <TIM_OC4_SetConfig+0x74>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <TIM_OC4_SetConfig+0xb4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d003      	beq.n	8003a40 <TIM_OC4_SetConfig+0x74>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <TIM_OC4_SetConfig+0xb8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d109      	bne.n	8003a54 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	019b      	lsls	r3, r3, #6
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	621a      	str	r2, [r3, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40012c00 	.word	0x40012c00
 8003a80:	40014000 	.word	0x40014000
 8003a84:	40014400 	.word	0x40014400

08003a88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003acc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a13      	ldr	r2, [pc, #76]	; (8003b2c <TIM_OC5_SetConfig+0xa4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d007      	beq.n	8003af2 <TIM_OC5_SetConfig+0x6a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a12      	ldr	r2, [pc, #72]	; (8003b30 <TIM_OC5_SetConfig+0xa8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d003      	beq.n	8003af2 <TIM_OC5_SetConfig+0x6a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a11      	ldr	r2, [pc, #68]	; (8003b34 <TIM_OC5_SetConfig+0xac>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d109      	bne.n	8003b06 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	621a      	str	r2, [r3, #32]
}
 8003b20:	bf00      	nop
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40014000 	.word	0x40014000
 8003b34:	40014400 	.word	0x40014400

08003b38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	051b      	lsls	r3, r3, #20
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <TIM_OC6_SetConfig+0xa8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d007      	beq.n	8003ba4 <TIM_OC6_SetConfig+0x6c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <TIM_OC6_SetConfig+0xac>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <TIM_OC6_SetConfig+0x6c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <TIM_OC6_SetConfig+0xb0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d109      	bne.n	8003bb8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003baa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	029b      	lsls	r3, r3, #10
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40012c00 	.word	0x40012c00
 8003be4:	40014000 	.word	0x40014000
 8003be8:	40014400 	.word	0x40014400

08003bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	f023 0201 	bic.w	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f023 030a 	bic.w	r3, r3, #10
 8003c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b087      	sub	sp, #28
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	f023 0210 	bic.w	r2, r3, #16
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	031b      	lsls	r3, r3, #12
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	621a      	str	r2, [r3, #32]
}
 8003c9e:	bf00      	nop
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f043 0307 	orr.w	r3, r3, #7
 8003ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	609a      	str	r2, [r3, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	021a      	lsls	r2, r3, #8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	609a      	str	r2, [r3, #8]
}
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	2201      	movs	r2, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1a      	ldr	r2, [r3, #32]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	401a      	ands	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a1a      	ldr	r2, [r3, #32]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	fa01 f303 	lsl.w	r3, r1, r3
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e04f      	b.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a21      	ldr	r2, [pc, #132]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d108      	bne.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003db4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a14      	ldr	r2, [pc, #80]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d009      	beq.n	8003df8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dec:	d004      	beq.n	8003df8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a10      	ldr	r2, [pc, #64]	; (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d10c      	bne.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	40014000 	.word	0x40014000

08003e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e040      	b.n	8003f08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fc ffbc 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2224      	movs	r2, #36	; 0x24
 8003ea0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0201 	bic.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fb84 	bl	80045c0 <UART_SetConfig>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e022      	b.n	8003f08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fda4 	bl	8004a18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ede:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fe2b 	bl	8004b5c <UART_CheckIdleState>
 8003f06:	4603      	mov	r3, r0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08a      	sub	sp, #40	; 0x28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d142      	bne.n	8003fac <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HAL_UART_Receive_IT+0x22>
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e03b      	b.n	8003fae <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_UART_Receive_IT+0x34>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e034      	b.n	8003fae <HAL_UART_Receive_IT+0x9e>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a18      	ldr	r2, [pc, #96]	; (8003fb8 <HAL_UART_Receive_IT+0xa8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d01f      	beq.n	8003f9c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d018      	beq.n	8003f9c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	613b      	str	r3, [r7, #16]
   return(result);
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	623b      	str	r3, [r7, #32]
 8003f8a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8c:	69f9      	ldr	r1, [r7, #28]
 8003f8e:	6a3a      	ldr	r2, [r7, #32]
 8003f90:	e841 2300 	strex	r3, r2, [r1]
 8003f94:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e6      	bne.n	8003f6a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fee8 	bl	8004d78 <UART_Start_Receive_IT>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	e000      	b.n	8003fae <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003fac:	2302      	movs	r3, #2
  }
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3728      	adds	r7, #40	; 0x28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40008000 	.word	0x40008000

08003fbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b0ba      	sub	sp, #232	; 0xe8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fe2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003fe6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003fea:	4013      	ands	r3, r2
 8003fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d115      	bne.n	8004024 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00f      	beq.n	8004024 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d009      	beq.n	8004024 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 82a6 	beq.w	8004566 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
      }
      return;
 8004022:	e2a0      	b.n	8004566 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004024:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8117 	beq.w	800425c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800402e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800403a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800403e:	4b85      	ldr	r3, [pc, #532]	; (8004254 <HAL_UART_IRQHandler+0x298>)
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 810a 	beq.w	800425c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d011      	beq.n	8004078 <HAL_UART_IRQHandler+0xbc>
 8004054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00b      	beq.n	8004078 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2201      	movs	r2, #1
 8004066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800406e:	f043 0201 	orr.w	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d011      	beq.n	80040a8 <HAL_UART_IRQHandler+0xec>
 8004084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00b      	beq.n	80040a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2202      	movs	r2, #2
 8004096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800409e:	f043 0204 	orr.w	r2, r3, #4
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d011      	beq.n	80040d8 <HAL_UART_IRQHandler+0x11c>
 80040b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00b      	beq.n	80040d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2204      	movs	r2, #4
 80040c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ce:	f043 0202 	orr.w	r2, r3, #2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d017      	beq.n	8004114 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d105      	bne.n	80040fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80040f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00b      	beq.n	8004114 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2208      	movs	r2, #8
 8004102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800410a:	f043 0208 	orr.w	r2, r3, #8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411c:	2b00      	cmp	r3, #0
 800411e:	d012      	beq.n	8004146 <HAL_UART_IRQHandler+0x18a>
 8004120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004124:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00c      	beq.n	8004146 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004134:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800413c:	f043 0220 	orr.w	r2, r3, #32
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 820c 	beq.w	800456a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00d      	beq.n	800417a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800415e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004180:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d005      	beq.n	800419e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004196:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800419a:	2b00      	cmp	r3, #0
 800419c:	d04f      	beq.n	800423e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 feb4 	bl	8004f0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b40      	cmp	r3, #64	; 0x40
 80041b0:	d141      	bne.n	8004236 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3308      	adds	r3, #8
 80041b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3308      	adds	r3, #8
 80041da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041ee:	e841 2300 	strex	r3, r2, [r1]
 80041f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1d9      	bne.n	80041b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	2b00      	cmp	r3, #0
 8004204:	d013      	beq.n	800422e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	4a13      	ldr	r2, [pc, #76]	; (8004258 <HAL_UART_IRQHandler+0x29c>)
 800420c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	4618      	mov	r0, r3
 8004214:	f7fd f8ed 	bl	80013f2 <HAL_DMA_Abort_IT>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d017      	beq.n	800424e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004228:	4610      	mov	r0, r2
 800422a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	e00f      	b.n	800424e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f9b0 	bl	8004594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	e00b      	b.n	800424e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f9ac 	bl	8004594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423c:	e007      	b.n	800424e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f9a8 	bl	8004594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800424c:	e18d      	b.n	800456a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800424e:	bf00      	nop
    return;
 8004250:	e18b      	b.n	800456a <HAL_UART_IRQHandler+0x5ae>
 8004252:	bf00      	nop
 8004254:	04000120 	.word	0x04000120
 8004258:	08004fd3 	.word	0x08004fd3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004260:	2b01      	cmp	r3, #1
 8004262:	f040 8146 	bne.w	80044f2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 813f 	beq.w	80044f2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8138 	beq.w	80044f2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2210      	movs	r2, #16
 8004288:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	f040 80b4 	bne.w	8004402 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 815f 	beq.w	800456e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ba:	429a      	cmp	r2, r3
 80042bc:	f080 8157 	bcs.w	800456e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f040 8085 	bne.w	80043e6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004306:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800430a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004312:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800431e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1da      	bne.n	80042dc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3308      	adds	r3, #8
 800432c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3308      	adds	r3, #8
 8004346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800434a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800434e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004352:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800435c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e1      	bne.n	8004326 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3308      	adds	r3, #8
 8004368:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3308      	adds	r3, #8
 8004382:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004386:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004388:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800438c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e3      	bne.n	8004362 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ae:	e853 3f00 	ldrex	r3, [r3]
 80043b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b6:	f023 0310 	bic.w	r3, r3, #16
 80043ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80043ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043d0:	e841 2300 	strex	r3, r2, [r1]
 80043d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e4      	bne.n	80043a6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fc ffc8 	bl	8001376 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	4619      	mov	r1, r3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f8d4 	bl	80045a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004400:	e0b5      	b.n	800456e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800440e:	b29b      	uxth	r3, r3
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 80a7 	beq.w	8004572 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80a2 	beq.w	8004572 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800443c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004450:	647b      	str	r3, [r7, #68]	; 0x44
 8004452:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004456:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800445e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e4      	bne.n	800442e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3308      	adds	r3, #8
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	623b      	str	r3, [r7, #32]
   return(result);
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3308      	adds	r3, #8
 8004484:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004488:	633a      	str	r2, [r7, #48]	; 0x30
 800448a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800448e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e3      	bne.n	8004464 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0310 	bic.w	r3, r3, #16
 80044c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044d0:	61fb      	str	r3, [r7, #28]
 80044d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	69b9      	ldr	r1, [r7, #24]
 80044d6:	69fa      	ldr	r2, [r7, #28]
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	617b      	str	r3, [r7, #20]
   return(result);
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e4      	bne.n	80044ae <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044e8:	4619      	mov	r1, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f85c 	bl	80045a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044f0:	e03f      	b.n	8004572 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00e      	beq.n	800451c <HAL_UART_IRQHandler+0x560>
 80044fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d008      	beq.n	800451c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004512:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fefc 	bl	8005312 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800451a:	e02d      	b.n	8004578 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800451c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00e      	beq.n	8004546 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800452c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01c      	beq.n	8004576 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	4798      	blx	r3
    }
    return;
 8004544:	e017      	b.n	8004576 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d012      	beq.n	8004578 <HAL_UART_IRQHandler+0x5bc>
 8004552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00c      	beq.n	8004578 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fd4d 	bl	8004ffe <UART_EndTransmit_IT>
    return;
 8004564:	e008      	b.n	8004578 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004566:	bf00      	nop
 8004568:	e006      	b.n	8004578 <HAL_UART_IRQHandler+0x5bc>
    return;
 800456a:	bf00      	nop
 800456c:	e004      	b.n	8004578 <HAL_UART_IRQHandler+0x5bc>
      return;
 800456e:	bf00      	nop
 8004570:	e002      	b.n	8004578 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004572:	bf00      	nop
 8004574:	e000      	b.n	8004578 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004576:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004578:	37e8      	adds	r7, #232	; 0xe8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop

08004580 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c4:	b08a      	sub	sp, #40	; 0x28
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	431a      	orrs	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	431a      	orrs	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4bb4      	ldr	r3, [pc, #720]	; (80048c0 <UART_SetConfig+0x300>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045f8:	430b      	orrs	r3, r1
 80045fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4aa9      	ldr	r2, [pc, #676]	; (80048c4 <UART_SetConfig+0x304>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004628:	4313      	orrs	r3, r2
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463c:	430a      	orrs	r2, r1
 800463e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4aa0      	ldr	r2, [pc, #640]	; (80048c8 <UART_SetConfig+0x308>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d126      	bne.n	8004698 <UART_SetConfig+0xd8>
 800464a:	4ba0      	ldr	r3, [pc, #640]	; (80048cc <UART_SetConfig+0x30c>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	2b03      	cmp	r3, #3
 8004656:	d81b      	bhi.n	8004690 <UART_SetConfig+0xd0>
 8004658:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <UART_SetConfig+0xa0>)
 800465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465e:	bf00      	nop
 8004660:	08004671 	.word	0x08004671
 8004664:	08004681 	.word	0x08004681
 8004668:	08004679 	.word	0x08004679
 800466c:	08004689 	.word	0x08004689
 8004670:	2301      	movs	r3, #1
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004676:	e080      	b.n	800477a <UART_SetConfig+0x1ba>
 8004678:	2302      	movs	r3, #2
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467e:	e07c      	b.n	800477a <UART_SetConfig+0x1ba>
 8004680:	2304      	movs	r3, #4
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004686:	e078      	b.n	800477a <UART_SetConfig+0x1ba>
 8004688:	2308      	movs	r3, #8
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468e:	e074      	b.n	800477a <UART_SetConfig+0x1ba>
 8004690:	2310      	movs	r3, #16
 8004692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004696:	e070      	b.n	800477a <UART_SetConfig+0x1ba>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a8c      	ldr	r2, [pc, #560]	; (80048d0 <UART_SetConfig+0x310>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d138      	bne.n	8004714 <UART_SetConfig+0x154>
 80046a2:	4b8a      	ldr	r3, [pc, #552]	; (80048cc <UART_SetConfig+0x30c>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	f003 030c 	and.w	r3, r3, #12
 80046ac:	2b0c      	cmp	r3, #12
 80046ae:	d82d      	bhi.n	800470c <UART_SetConfig+0x14c>
 80046b0:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <UART_SetConfig+0xf8>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	080046ed 	.word	0x080046ed
 80046bc:	0800470d 	.word	0x0800470d
 80046c0:	0800470d 	.word	0x0800470d
 80046c4:	0800470d 	.word	0x0800470d
 80046c8:	080046fd 	.word	0x080046fd
 80046cc:	0800470d 	.word	0x0800470d
 80046d0:	0800470d 	.word	0x0800470d
 80046d4:	0800470d 	.word	0x0800470d
 80046d8:	080046f5 	.word	0x080046f5
 80046dc:	0800470d 	.word	0x0800470d
 80046e0:	0800470d 	.word	0x0800470d
 80046e4:	0800470d 	.word	0x0800470d
 80046e8:	08004705 	.word	0x08004705
 80046ec:	2300      	movs	r3, #0
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f2:	e042      	b.n	800477a <UART_SetConfig+0x1ba>
 80046f4:	2302      	movs	r3, #2
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fa:	e03e      	b.n	800477a <UART_SetConfig+0x1ba>
 80046fc:	2304      	movs	r3, #4
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004702:	e03a      	b.n	800477a <UART_SetConfig+0x1ba>
 8004704:	2308      	movs	r3, #8
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470a:	e036      	b.n	800477a <UART_SetConfig+0x1ba>
 800470c:	2310      	movs	r3, #16
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004712:	e032      	b.n	800477a <UART_SetConfig+0x1ba>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a6a      	ldr	r2, [pc, #424]	; (80048c4 <UART_SetConfig+0x304>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d12a      	bne.n	8004774 <UART_SetConfig+0x1b4>
 800471e:	4b6b      	ldr	r3, [pc, #428]	; (80048cc <UART_SetConfig+0x30c>)
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004724:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004728:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800472c:	d01a      	beq.n	8004764 <UART_SetConfig+0x1a4>
 800472e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004732:	d81b      	bhi.n	800476c <UART_SetConfig+0x1ac>
 8004734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004738:	d00c      	beq.n	8004754 <UART_SetConfig+0x194>
 800473a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800473e:	d815      	bhi.n	800476c <UART_SetConfig+0x1ac>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <UART_SetConfig+0x18c>
 8004744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004748:	d008      	beq.n	800475c <UART_SetConfig+0x19c>
 800474a:	e00f      	b.n	800476c <UART_SetConfig+0x1ac>
 800474c:	2300      	movs	r3, #0
 800474e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004752:	e012      	b.n	800477a <UART_SetConfig+0x1ba>
 8004754:	2302      	movs	r3, #2
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475a:	e00e      	b.n	800477a <UART_SetConfig+0x1ba>
 800475c:	2304      	movs	r3, #4
 800475e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004762:	e00a      	b.n	800477a <UART_SetConfig+0x1ba>
 8004764:	2308      	movs	r3, #8
 8004766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476a:	e006      	b.n	800477a <UART_SetConfig+0x1ba>
 800476c:	2310      	movs	r3, #16
 800476e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004772:	e002      	b.n	800477a <UART_SetConfig+0x1ba>
 8004774:	2310      	movs	r3, #16
 8004776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a51      	ldr	r2, [pc, #324]	; (80048c4 <UART_SetConfig+0x304>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d17a      	bne.n	800487a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004784:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004788:	2b08      	cmp	r3, #8
 800478a:	d824      	bhi.n	80047d6 <UART_SetConfig+0x216>
 800478c:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <UART_SetConfig+0x1d4>)
 800478e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004792:	bf00      	nop
 8004794:	080047b9 	.word	0x080047b9
 8004798:	080047d7 	.word	0x080047d7
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	080047d7 	.word	0x080047d7
 80047a4:	080047c7 	.word	0x080047c7
 80047a8:	080047d7 	.word	0x080047d7
 80047ac:	080047d7 	.word	0x080047d7
 80047b0:	080047d7 	.word	0x080047d7
 80047b4:	080047cf 	.word	0x080047cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b8:	f7fd fe18 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 80047bc:	61f8      	str	r0, [r7, #28]
        break;
 80047be:	e010      	b.n	80047e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c0:	4b44      	ldr	r3, [pc, #272]	; (80048d4 <UART_SetConfig+0x314>)
 80047c2:	61fb      	str	r3, [r7, #28]
        break;
 80047c4:	e00d      	b.n	80047e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047c6:	f7fd fd79 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 80047ca:	61f8      	str	r0, [r7, #28]
        break;
 80047cc:	e009      	b.n	80047e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047d2:	61fb      	str	r3, [r7, #28]
        break;
 80047d4:	e005      	b.n	80047e2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8107 	beq.w	80049f8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	4413      	add	r3, r2
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d305      	bcc.n	8004806 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	429a      	cmp	r2, r3
 8004804:	d903      	bls.n	800480e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800480c:	e0f4      	b.n	80049f8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	2200      	movs	r2, #0
 8004812:	461c      	mov	r4, r3
 8004814:	4615      	mov	r5, r2
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	022b      	lsls	r3, r5, #8
 8004820:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004824:	0222      	lsls	r2, r4, #8
 8004826:	68f9      	ldr	r1, [r7, #12]
 8004828:	6849      	ldr	r1, [r1, #4]
 800482a:	0849      	lsrs	r1, r1, #1
 800482c:	2000      	movs	r0, #0
 800482e:	4688      	mov	r8, r1
 8004830:	4681      	mov	r9, r0
 8004832:	eb12 0a08 	adds.w	sl, r2, r8
 8004836:	eb43 0b09 	adc.w	fp, r3, r9
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004848:	4650      	mov	r0, sl
 800484a:	4659      	mov	r1, fp
 800484c:	f7fb fcc8 	bl	80001e0 <__aeabi_uldivmod>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4613      	mov	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800485e:	d308      	bcc.n	8004872 <UART_SetConfig+0x2b2>
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004866:	d204      	bcs.n	8004872 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	60da      	str	r2, [r3, #12]
 8004870:	e0c2      	b.n	80049f8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004878:	e0be      	b.n	80049f8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004882:	d16a      	bne.n	800495a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004888:	2b08      	cmp	r3, #8
 800488a:	d834      	bhi.n	80048f6 <UART_SetConfig+0x336>
 800488c:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <UART_SetConfig+0x2d4>)
 800488e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004892:	bf00      	nop
 8004894:	080048b9 	.word	0x080048b9
 8004898:	080048d9 	.word	0x080048d9
 800489c:	080048e1 	.word	0x080048e1
 80048a0:	080048f7 	.word	0x080048f7
 80048a4:	080048e7 	.word	0x080048e7
 80048a8:	080048f7 	.word	0x080048f7
 80048ac:	080048f7 	.word	0x080048f7
 80048b0:	080048f7 	.word	0x080048f7
 80048b4:	080048ef 	.word	0x080048ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b8:	f7fd fd98 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 80048bc:	61f8      	str	r0, [r7, #28]
        break;
 80048be:	e020      	b.n	8004902 <UART_SetConfig+0x342>
 80048c0:	efff69f3 	.word	0xefff69f3
 80048c4:	40008000 	.word	0x40008000
 80048c8:	40013800 	.word	0x40013800
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40004400 	.word	0x40004400
 80048d4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d8:	f7fd fd9e 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 80048dc:	61f8      	str	r0, [r7, #28]
        break;
 80048de:	e010      	b.n	8004902 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e0:	4b4c      	ldr	r3, [pc, #304]	; (8004a14 <UART_SetConfig+0x454>)
 80048e2:	61fb      	str	r3, [r7, #28]
        break;
 80048e4:	e00d      	b.n	8004902 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e6:	f7fd fce9 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 80048ea:	61f8      	str	r0, [r7, #28]
        break;
 80048ec:	e009      	b.n	8004902 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048f2:	61fb      	str	r3, [r7, #28]
        break;
 80048f4:	e005      	b.n	8004902 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004900:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d077      	beq.n	80049f8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	005a      	lsls	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	085b      	lsrs	r3, r3, #1
 8004912:	441a      	add	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
 800491c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b0f      	cmp	r3, #15
 8004922:	d916      	bls.n	8004952 <UART_SetConfig+0x392>
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492a:	d212      	bcs.n	8004952 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	b29b      	uxth	r3, r3
 8004930:	f023 030f 	bic.w	r3, r3, #15
 8004934:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	085b      	lsrs	r3, r3, #1
 800493a:	b29b      	uxth	r3, r3
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	b29a      	uxth	r2, r3
 8004942:	8afb      	ldrh	r3, [r7, #22]
 8004944:	4313      	orrs	r3, r2
 8004946:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	8afa      	ldrh	r2, [r7, #22]
 800494e:	60da      	str	r2, [r3, #12]
 8004950:	e052      	b.n	80049f8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004958:	e04e      	b.n	80049f8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800495a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800495e:	2b08      	cmp	r3, #8
 8004960:	d827      	bhi.n	80049b2 <UART_SetConfig+0x3f2>
 8004962:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <UART_SetConfig+0x3a8>)
 8004964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004968:	0800498d 	.word	0x0800498d
 800496c:	08004995 	.word	0x08004995
 8004970:	0800499d 	.word	0x0800499d
 8004974:	080049b3 	.word	0x080049b3
 8004978:	080049a3 	.word	0x080049a3
 800497c:	080049b3 	.word	0x080049b3
 8004980:	080049b3 	.word	0x080049b3
 8004984:	080049b3 	.word	0x080049b3
 8004988:	080049ab 	.word	0x080049ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800498c:	f7fd fd2e 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8004990:	61f8      	str	r0, [r7, #28]
        break;
 8004992:	e014      	b.n	80049be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004994:	f7fd fd40 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 8004998:	61f8      	str	r0, [r7, #28]
        break;
 800499a:	e010      	b.n	80049be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800499c:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <UART_SetConfig+0x454>)
 800499e:	61fb      	str	r3, [r7, #28]
        break;
 80049a0:	e00d      	b.n	80049be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049a2:	f7fd fc8b 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 80049a6:	61f8      	str	r0, [r7, #28]
        break;
 80049a8:	e009      	b.n	80049be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ae:	61fb      	str	r3, [r7, #28]
        break;
 80049b0:	e005      	b.n	80049be <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049bc:	bf00      	nop
    }

    if (pclk != 0U)
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d019      	beq.n	80049f8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	085a      	lsrs	r2, r3, #1
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	441a      	add	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2b0f      	cmp	r3, #15
 80049dc:	d909      	bls.n	80049f2 <UART_SetConfig+0x432>
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e4:	d205      	bcs.n	80049f2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60da      	str	r2, [r3, #12]
 80049f0:	e002      	b.n	80049f8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3728      	adds	r7, #40	; 0x28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a12:	bf00      	nop
 8004a14:	00f42400 	.word	0x00f42400

08004a18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01a      	beq.n	8004b2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b16:	d10a      	bne.n	8004b2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	605a      	str	r2, [r3, #4]
  }
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b6c:	f7fc fae6 	bl	800113c <HAL_GetTick>
 8004b70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d10e      	bne.n	8004b9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f82d 	bl	8004bee <UART_WaitOnFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e023      	b.n	8004be6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d10e      	bne.n	8004bca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f817 	bl	8004bee <UART_WaitOnFlagUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e00d      	b.n	8004be6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b09c      	sub	sp, #112	; 0x70
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	603b      	str	r3, [r7, #0]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bfe:	e0a5      	b.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	f000 80a1 	beq.w	8004d4c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0a:	f7fc fa97 	bl	800113c <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d302      	bcc.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d13e      	bne.n	8004c9e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c34:	667b      	str	r3, [r7, #100]	; 0x64
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e6      	bne.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3308      	adds	r3, #8
 8004c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	663b      	str	r3, [r7, #96]	; 0x60
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3308      	adds	r3, #8
 8004c70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c72:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e5      	bne.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e067      	b.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d04f      	beq.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cba:	d147      	bne.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cc4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e6      	bne.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	613b      	str	r3, [r7, #16]
   return(result);
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3308      	adds	r3, #8
 8004d16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d18:	623a      	str	r2, [r7, #32]
 8004d1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	69f9      	ldr	r1, [r7, #28]
 8004d1e:	6a3a      	ldr	r2, [r7, #32]
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e5      	bne.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e010      	b.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69da      	ldr	r2, [r3, #28]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4013      	ands	r3, r2
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	bf0c      	ite	eq
 8004d5c:	2301      	moveq	r3, #1
 8004d5e:	2300      	movne	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	461a      	mov	r2, r3
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	f43f af4a 	beq.w	8004c00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3770      	adds	r7, #112	; 0x70
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b097      	sub	sp, #92	; 0x5c
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	4613      	mov	r3, r2
 8004d84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	88fa      	ldrh	r2, [r7, #6]
 8004d90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	88fa      	ldrh	r2, [r7, #6]
 8004d98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004daa:	d10e      	bne.n	8004dca <UART_Start_Receive_IT+0x52>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d105      	bne.n	8004dc0 <UART_Start_Receive_IT+0x48>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004dba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dbe:	e02d      	b.n	8004e1c <UART_Start_Receive_IT+0xa4>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	22ff      	movs	r2, #255	; 0xff
 8004dc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dc8:	e028      	b.n	8004e1c <UART_Start_Receive_IT+0xa4>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10d      	bne.n	8004dee <UART_Start_Receive_IT+0x76>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d104      	bne.n	8004de4 <UART_Start_Receive_IT+0x6c>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	22ff      	movs	r2, #255	; 0xff
 8004dde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004de2:	e01b      	b.n	8004e1c <UART_Start_Receive_IT+0xa4>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	227f      	movs	r2, #127	; 0x7f
 8004de8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dec:	e016      	b.n	8004e1c <UART_Start_Receive_IT+0xa4>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004df6:	d10d      	bne.n	8004e14 <UART_Start_Receive_IT+0x9c>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <UART_Start_Receive_IT+0x92>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	227f      	movs	r2, #127	; 0x7f
 8004e04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e08:	e008      	b.n	8004e1c <UART_Start_Receive_IT+0xa4>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	223f      	movs	r2, #63	; 0x3f
 8004e0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e12:	e003      	b.n	8004e1c <UART_Start_Receive_IT+0xa4>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2222      	movs	r2, #34	; 0x22
 8004e28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3308      	adds	r3, #8
 8004e30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	657b      	str	r3, [r7, #84]	; 0x54
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3308      	adds	r3, #8
 8004e48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e5      	bne.n	8004e2a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e66:	d107      	bne.n	8004e78 <UART_Start_Receive_IT+0x100>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d103      	bne.n	8004e78 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4a24      	ldr	r2, [pc, #144]	; (8004f04 <UART_Start_Receive_IT+0x18c>)
 8004e74:	665a      	str	r2, [r3, #100]	; 0x64
 8004e76:	e002      	b.n	8004e7e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4a23      	ldr	r2, [pc, #140]	; (8004f08 <UART_Start_Receive_IT+0x190>)
 8004e7c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d019      	beq.n	8004ec2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eac:	637b      	str	r3, [r7, #52]	; 0x34
 8004eae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e6      	bne.n	8004e8e <UART_Start_Receive_IT+0x116>
 8004ec0:	e018      	b.n	8004ef4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	e853 3f00 	ldrex	r3, [r3]
 8004ece:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f043 0320 	orr.w	r3, r3, #32
 8004ed6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	461a      	mov	r2, r3
 8004ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee0:	623b      	str	r3, [r7, #32]
 8004ee2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee4:	69f9      	ldr	r1, [r7, #28]
 8004ee6:	6a3a      	ldr	r2, [r7, #32]
 8004ee8:	e841 2300 	strex	r3, r2, [r1]
 8004eec:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1e6      	bne.n	8004ec2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	375c      	adds	r7, #92	; 0x5c
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	080051b3 	.word	0x080051b3
 8004f08:	08005053 	.word	0x08005053

08004f0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b095      	sub	sp, #84	; 0x54
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1c:	e853 3f00 	ldrex	r3, [r3]
 8004f20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f32:	643b      	str	r3, [r7, #64]	; 0x40
 8004f34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1e6      	bne.n	8004f14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	e853 3f00 	ldrex	r3, [r3]
 8004f54:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	f023 0301 	bic.w	r3, r3, #1
 8004f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3308      	adds	r3, #8
 8004f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e5      	bne.n	8004f46 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d118      	bne.n	8004fb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	e853 3f00 	ldrex	r3, [r3]
 8004f8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f023 0310 	bic.w	r3, r3, #16
 8004f96:	647b      	str	r3, [r7, #68]	; 0x44
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fa0:	61bb      	str	r3, [r7, #24]
 8004fa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa4:	6979      	ldr	r1, [r7, #20]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	e841 2300 	strex	r3, r2, [r1]
 8004fac:	613b      	str	r3, [r7, #16]
   return(result);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e6      	bne.n	8004f82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004fc6:	bf00      	nop
 8004fc8:	3754      	adds	r7, #84	; 0x54
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f7ff facf 	bl	8004594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ff6:	bf00      	nop
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b088      	sub	sp, #32
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	60bb      	str	r3, [r7, #8]
   return(result);
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800501a:	61fb      	str	r3, [r7, #28]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	61bb      	str	r3, [r7, #24]
 8005026:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6979      	ldr	r1, [r7, #20]
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	613b      	str	r3, [r7, #16]
   return(result);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e6      	bne.n	8005006 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2220      	movs	r2, #32
 800503c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff fa9b 	bl	8004580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800504a:	bf00      	nop
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b096      	sub	sp, #88	; 0x58
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005060:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005068:	2b22      	cmp	r3, #34	; 0x22
 800506a:	f040 8094 	bne.w	8005196 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005074:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005078:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800507c:	b2d9      	uxtb	r1, r3
 800507e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005082:	b2da      	uxtb	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005088:	400a      	ands	r2, r1
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d179      	bne.n	80051aa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ca:	653b      	str	r3, [r7, #80]	; 0x50
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d4:	647b      	str	r3, [r7, #68]	; 0x44
 80050d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e6      	bne.n	80050b6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3308      	adds	r3, #8
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	623b      	str	r3, [r7, #32]
   return(result);
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	f023 0301 	bic.w	r3, r3, #1
 80050fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3308      	adds	r3, #8
 8005106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005108:	633a      	str	r2, [r7, #48]	; 0x30
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800510e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e5      	bne.n	80050e8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800512c:	2b01      	cmp	r3, #1
 800512e:	d12e      	bne.n	800518e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	e853 3f00 	ldrex	r3, [r3]
 8005142:	60fb      	str	r3, [r7, #12]
   return(result);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0310 	bic.w	r3, r3, #16
 800514a:	64bb      	str	r3, [r7, #72]	; 0x48
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	69b9      	ldr	r1, [r7, #24]
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	e841 2300 	strex	r3, r2, [r1]
 8005160:	617b      	str	r3, [r7, #20]
   return(result);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1e6      	bne.n	8005136 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	2b10      	cmp	r3, #16
 8005174:	d103      	bne.n	800517e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2210      	movs	r2, #16
 800517c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005184:	4619      	mov	r1, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff fa0e 	bl	80045a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800518c:	e00d      	b.n	80051aa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fb fcda 	bl	8000b48 <HAL_UART_RxCpltCallback>
}
 8005194:	e009      	b.n	80051aa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	8b1b      	ldrh	r3, [r3, #24]
 800519c:	b29a      	uxth	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0208 	orr.w	r2, r2, #8
 80051a6:	b292      	uxth	r2, r2
 80051a8:	831a      	strh	r2, [r3, #24]
}
 80051aa:	bf00      	nop
 80051ac:	3758      	adds	r7, #88	; 0x58
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b096      	sub	sp, #88	; 0x58
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051c8:	2b22      	cmp	r3, #34	; 0x22
 80051ca:	f040 8094 	bne.w	80052f6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051d4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051dc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80051de:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80051e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051e6:	4013      	ands	r3, r2
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f2:	1c9a      	adds	r2, r3, #2
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d179      	bne.n	800530a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521e:	e853 3f00 	ldrex	r3, [r3]
 8005222:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800522a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	461a      	mov	r2, r3
 8005232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005234:	643b      	str	r3, [r7, #64]	; 0x40
 8005236:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800523a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800523c:	e841 2300 	strex	r3, r2, [r1]
 8005240:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e6      	bne.n	8005216 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3308      	adds	r3, #8
 800524e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	e853 3f00 	ldrex	r3, [r3]
 8005256:	61fb      	str	r3, [r7, #28]
   return(result);
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f023 0301 	bic.w	r3, r3, #1
 800525e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3308      	adds	r3, #8
 8005266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005268:	62fa      	str	r2, [r7, #44]	; 0x2c
 800526a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800526e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005270:	e841 2300 	strex	r3, r2, [r1]
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e5      	bne.n	8005248 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800528c:	2b01      	cmp	r3, #1
 800528e:	d12e      	bne.n	80052ee <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f023 0310 	bic.w	r3, r3, #16
 80052aa:	647b      	str	r3, [r7, #68]	; 0x44
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6979      	ldr	r1, [r7, #20]
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	613b      	str	r3, [r7, #16]
   return(result);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e6      	bne.n	8005296 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d103      	bne.n	80052de <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2210      	movs	r2, #16
 80052dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052e4:	4619      	mov	r1, r3
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7ff f95e 	bl	80045a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052ec:	e00d      	b.n	800530a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fb fc2a 	bl	8000b48 <HAL_UART_RxCpltCallback>
}
 80052f4:	e009      	b.n	800530a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	8b1b      	ldrh	r3, [r3, #24]
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0208 	orr.w	r2, r2, #8
 8005306:	b292      	uxth	r2, r2
 8005308:	831a      	strh	r2, [r3, #24]
}
 800530a:	bf00      	nop
 800530c:	3758      	adds	r7, #88	; 0x58
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
	...

08005328 <__libc_init_array>:
 8005328:	b570      	push	{r4, r5, r6, lr}
 800532a:	4d0d      	ldr	r5, [pc, #52]	; (8005360 <__libc_init_array+0x38>)
 800532c:	4c0d      	ldr	r4, [pc, #52]	; (8005364 <__libc_init_array+0x3c>)
 800532e:	1b64      	subs	r4, r4, r5
 8005330:	10a4      	asrs	r4, r4, #2
 8005332:	2600      	movs	r6, #0
 8005334:	42a6      	cmp	r6, r4
 8005336:	d109      	bne.n	800534c <__libc_init_array+0x24>
 8005338:	4d0b      	ldr	r5, [pc, #44]	; (8005368 <__libc_init_array+0x40>)
 800533a:	4c0c      	ldr	r4, [pc, #48]	; (800536c <__libc_init_array+0x44>)
 800533c:	f000 f820 	bl	8005380 <_init>
 8005340:	1b64      	subs	r4, r4, r5
 8005342:	10a4      	asrs	r4, r4, #2
 8005344:	2600      	movs	r6, #0
 8005346:	42a6      	cmp	r6, r4
 8005348:	d105      	bne.n	8005356 <__libc_init_array+0x2e>
 800534a:	bd70      	pop	{r4, r5, r6, pc}
 800534c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005350:	4798      	blx	r3
 8005352:	3601      	adds	r6, #1
 8005354:	e7ee      	b.n	8005334 <__libc_init_array+0xc>
 8005356:	f855 3b04 	ldr.w	r3, [r5], #4
 800535a:	4798      	blx	r3
 800535c:	3601      	adds	r6, #1
 800535e:	e7f2      	b.n	8005346 <__libc_init_array+0x1e>
 8005360:	080053e8 	.word	0x080053e8
 8005364:	080053e8 	.word	0x080053e8
 8005368:	080053e8 	.word	0x080053e8
 800536c:	080053ec 	.word	0x080053ec

08005370 <memset>:
 8005370:	4402      	add	r2, r0
 8005372:	4603      	mov	r3, r0
 8005374:	4293      	cmp	r3, r2
 8005376:	d100      	bne.n	800537a <memset+0xa>
 8005378:	4770      	bx	lr
 800537a:	f803 1b01 	strb.w	r1, [r3], #1
 800537e:	e7f9      	b.n	8005374 <memset+0x4>

08005380 <_init>:
 8005380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005382:	bf00      	nop
 8005384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005386:	bc08      	pop	{r3}
 8005388:	469e      	mov	lr, r3
 800538a:	4770      	bx	lr

0800538c <_fini>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	bf00      	nop
 8005390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005392:	bc08      	pop	{r3}
 8005394:	469e      	mov	lr, r3
 8005396:	4770      	bx	lr
